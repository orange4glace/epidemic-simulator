!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=10)}([function(t,e,n){"use strict";var r=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=function(){function t(){var t=this;this.timeFactor=100,this.dayFactor=10,this.version=1,this.societyColumnLength=3,this.societyRowLength=3,this.societyPopulation=500,this.societySize=1e3,this.initialInfectionPossiblity=.1,this.infectionRate=.1,this.infectionDiscoveryRate=.5,this.infectionRecoveryRate=.05,this.infectionRadius=40,this.shoppingRate=.2,this.travelingRate=.1,this.quarantined=!0,this.quarantineRate=.1,this.dequarantineAfterRecovered=!0,this.socialDistance=40,this.socialDistanceParticipantRatio=.5;var e=localStorage.getItem("SIRModel");if(console.log(e),e)try{var n=JSON.parse(e);for(var r in console.log(n),n){var o=n[r];isNaN(o)||(this[r]=o)}}catch(t){console.error("Error loading SIR Model",t,e)}i.autorun((function(){t.timeFactor,t.dayFactor,t.societyColumnLength,t.societyRowLength,t.societyPopulation,t.societySize,t.initialInfectionPossiblity,t.infectionRate,t.infectionDiscoveryRate,t.infectionRecoveryRate,t.infectionRadius,t.shoppingRate,t.travelingRate,t.quarantined,t.quarantineRate,t.dequarantineAfterRecovered,t.socialDistance,t.socialDistanceParticipantRatio,localStorage.setItem("SIRModel",JSON.stringify(t))}))}return r([i.observable],t.prototype,"version",void 0),r([i.observable],t.prototype,"timeFactor",void 0),r([i.observable],t.prototype,"dayFactor",void 0),r([i.observable],t.prototype,"societyColumnLength",void 0),r([i.observable],t.prototype,"societyRowLength",void 0),r([i.observable],t.prototype,"societyPopulation",void 0),r([i.observable],t.prototype,"societySize",void 0),r([i.observable],t.prototype,"initialInfectionPossiblity",void 0),r([i.observable],t.prototype,"infectionRate",void 0),r([i.observable],t.prototype,"infectionDiscoveryRate",void 0),r([i.observable],t.prototype,"infectionRecoveryRate",void 0),r([i.observable],t.prototype,"infectionRadius",void 0),r([i.observable],t.prototype,"shoppingRate",void 0),r([i.observable],t.prototype,"travelingRate",void 0),r([i.observable],t.prototype,"quarantined",void 0),r([i.observable],t.prototype,"quarantineRate",void 0),r([i.observable],t.prototype,"dequarantineAfterRecovered",void 0),r([i.observable],t.prototype,"socialDistance",void 0),r([i.observable],t.prototype,"socialDistanceParticipantRatio",void 0),t}();e._SIRModelImpl=o,e.SIRModel=new o,window.SIRModel=e.SIRModel},function(t,e,n){"use strict";var r=this&&this.__decorate||function(t,e,n,r){var i,o=arguments.length,s=o<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)s=Reflect.decorate(t,e,n,r);else for(var a=t.length-1;a>=0;a--)(i=t[a])&&(s=(o<3?i(s):o>3?i(e,n,s):i(e,n))||s);return o>3&&s&&Object.defineProperty(e,n,s),s};Object.defineProperty(e,"__esModule",{value:!0});var i=n(2),o=new(function(){function t(){this.lastTimestamp_=-1,this.elasped_=0,this.paused=!1,this.entities_=[]}return Object.defineProperty(t.prototype,"delta",{get:function(){return this.delta_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"elasped",{get:function(){return this.elasped_},enumerable:!0,configurable:!0}),t.prototype.add=function(t){this.entities_.push(t)},t.prototype.update=function(t){if(-1!=this.lastTimestamp_){var e=this.lastTimestamp_;this.lastTimestamp_=t,this.paused||(this.delta_=t-e,this.elasped_+=this.delta_,this.entities_.forEach((function(t){t.update()})))}else this.lastTimestamp_=t},t.prototype.clear=function(){this.lastTimestamp_=-1,this.elasped_=0,this.entities_.forEach((function(t){t.dispose()})),this.entities_=[]},r([i.observable],t.prototype,"paused",void 0),t}());e.Engine=o,window.Engine=o},function(t,e,n){"use strict";n.r(e),function(t,r){n.d(e,"$mobx",(function(){return A})),n.d(e,"FlowCancellationError",(function(){return Re})),n.d(e,"IDerivationState",(function(){return Q})),n.d(e,"ObservableMap",(function(){return _n})),n.d(e,"ObservableSet",(function(){return xn})),n.d(e,"Reaction",(function(){return Gt})),n.d(e,"_allowStateChanges",(function(){return xt})),n.d(e,"_allowStateChangesInsideComputed",(function(){return At})),n.d(e,"_allowStateReadsEnd",(function(){return dt})),n.d(e,"_allowStateReadsStart",(function(){return pt})),n.d(e,"_endAction",(function(){return wt})),n.d(e,"_getAdministration",(function(){return jn})),n.d(e,"_getGlobalState",(function(){return Ut})),n.d(e,"_interceptReads",(function(){return Te})),n.d(e,"_isComputingDerivation",(function(){return st})),n.d(e,"_resetGlobalState",(function(){return Lt})),n.d(e,"_startAction",(function(){return St})),n.d(e,"action",(function(){return ie})),n.d(e,"autorun",(function(){return ue})),n.d(e,"comparer",(function(){return C})),n.d(e,"computed",(function(){return nt})),n.d(e,"configure",(function(){return ve})),n.d(e,"createAtom",(function(){return T})),n.d(e,"decorate",(function(){return ye})),n.d(e,"entries",(function(){return Le})),n.d(e,"extendObservable",(function(){return be})),n.d(e,"flow",(function(){return Oe})),n.d(e,"get",(function(){return qe})),n.d(e,"getAtom",(function(){return Nn})),n.d(e,"getDebugName",(function(){return Dn})),n.d(e,"getDependencyTree",(function(){return _e})),n.d(e,"getObserverTree",(function(){return we})),n.d(e,"has",(function(){return ze})),n.d(e,"intercept",(function(){return Ce})),n.d(e,"isAction",(function(){return se})),n.d(e,"isArrayLike",(function(){return _})),n.d(e,"isBoxedObservable",(function(){return Pt})),n.d(e,"isComputed",(function(){return Ne})),n.d(e,"isComputedProp",(function(){return je})),n.d(e,"isFlowCancellationError",(function(){return Ae})),n.d(e,"isObservable",(function(){return Me})),n.d(e,"isObservableArray",(function(){return bn})),n.d(e,"isObservableMap",(function(){return Sn})),n.d(e,"isObservableObject",(function(){return In})),n.d(e,"isObservableProp",(function(){return Ve})),n.d(e,"isObservableSet",(function(){return En})),n.d(e,"keys",(function(){return ke})),n.d(e,"observable",(function(){return J})),n.d(e,"observe",(function(){return We})),n.d(e,"onBecomeObserved",(function(){return he})),n.d(e,"onBecomeUnobserved",(function(){return pe})),n.d(e,"onReactionError",(function(){return Kt})),n.d(e,"reaction",(function(){return fe})),n.d(e,"remove",(function(){return Fe})),n.d(e,"runInAction",(function(){return oe})),n.d(e,"set",(function(){return Be})),n.d(e,"spy",(function(){return te})),n.d(e,"toJS",(function(){return Ge})),n.d(e,"trace",(function(){return Ke})),n.d(e,"transaction",(function(){return Je})),n.d(e,"untracked",(function(){return lt})),n.d(e,"values",(function(){return Ue})),n.d(e,"when",(function(){return Ze}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};var o=function(){return(o=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var i in e=arguments[n])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)};function s(t){var e="function"==typeof Symbol&&t[Symbol.iterator],n=0;return e?e.call(t):{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}}}function a(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,i,o=n.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(r=o.next()).done;)s.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return s}function u(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(a(arguments[e]));return t}var c=[];Object.freeze(c);var l={};function f(){return++kt.mobxGuid}function h(t){throw p(!1,t),"X"}function p(t,e){if(!t)throw new Error("[mobx] "+(e||"An invariant failed, however the error is obfuscated because this is a production build."))}Object.freeze(l);function d(t){var e=!1;return function(){if(!e)return e=!0,t.apply(this,arguments)}}var v=function(){};function y(t){return null!==t&&"object"==typeof t}function b(t){if(null===t||"object"!=typeof t)return!1;var e=Object.getPrototypeOf(t);return e===Object.prototype||null===e}function g(t,e,n){Object.defineProperty(t,e,{enumerable:!1,writable:!0,configurable:!0,value:n})}function m(t,e){var n="isMobX"+t;return e.prototype[n]=!0,function(t){return y(t)&&!0===t[n]}}function _(t){return Array.isArray(t)||bn(t)}function S(t){return t instanceof Map}function w(t){return t instanceof Set}function x(t){var e=new Set;for(var n in t)e.add(n);return Object.getOwnPropertySymbols(t).forEach((function(n){Object.getOwnPropertyDescriptor(t,n).enumerable&&e.add(n)})),Array.from(e)}function E(t){return t&&t.toString?t.toString():new String(t).toString()}function R(t){return null===t?null:"object"==typeof t?""+t:t}var A=Symbol("mobx administration"),O=function(){function t(t){void 0===t&&(t="Atom@"+f()),this.name=t,this.isPendingUnobservation=!1,this.isBeingObserved=!1,this.observers=new Set,this.diffValue=0,this.lastAccessedBy=0,this.lowestObserverState=Q.NOT_TRACKING}return t.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach((function(t){return t()}))},t.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach((function(t){return t()}))},t.prototype.reportObserved=function(){return Ht(this)},t.prototype.reportChanged=function(){qt(),function(t){if(t.lowestObserverState===Q.STALE)return;t.lowestObserverState=Q.STALE,t.observers.forEach((function(e){e.dependenciesState===Q.UP_TO_DATE&&(e.isTracing!==$.NONE&&Yt(e,t),e.onBecomeStale()),e.dependenciesState=Q.STALE}))}(this),Wt()},t.prototype.toString=function(){return this.name},t}(),P=m("Atom",O);function T(t,e,n){void 0===e&&(e=v),void 0===n&&(n=v);var r=new O(t);return e!==v&&he(r,e),n!==v&&pe(r,n),r}var C={identity:function(t,e){return t===e},structural:function(t,e){return Vn(t,e)},default:function(t,e){return Object.is(t,e)},shallow:function(t,e){return Vn(t,e,1)}},I=Symbol("mobx did run lazy initializers"),N=Symbol("mobx pending decorators"),j={},D={};function M(t,e){var n=e?j:D;return n[t]||(n[t]={configurable:!0,enumerable:e,get:function(){return V(this),this[t]},set:function(e){V(this),this[t]=e}})}function V(t){var e,n;if(!0!==t[I]){var r=t[N];if(r){g(t,I,!0);var i=u(Object.getOwnPropertySymbols(r),Object.keys(r));try{for(var o=s(i),a=o.next();!a.done;a=o.next()){var c=r[a.value];c.propertyCreator(t,c.prop,c.descriptor,c.decoratorTarget,c.decoratorArguments)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}}}}function k(t,e){return function(){var n,r=function(r,i,s,a){if(!0===a)return e(r,i,s,r,n),null;if(!Object.prototype.hasOwnProperty.call(r,N)){var u=r[N];g(r,N,o({},u))}return r[N][i]={prop:i,propertyCreator:e,descriptor:s,decoratorTarget:r,decoratorArguments:n},M(i,t)};return U(arguments)?(n=c,r.apply(null,arguments)):(n=Array.prototype.slice.call(arguments),r)}}function U(t){return(2===t.length||3===t.length)&&("string"==typeof t[1]||"symbol"==typeof t[1])||4===t.length&&!0===t[3]}function L(t,e,n){return Me(t)?t:Array.isArray(t)?J.array(t,{name:n}):b(t)?J.object(t,void 0,{name:n}):S(t)?J.map(t,{name:n}):w(t)?J.set(t,{name:n}):t}function B(t){return t}function F(e){p(e);var n=k(!0,(function(t,n,r,i,o){var s=r?r.initializer?r.initializer.call(t):r.value:void 0;An(t).addObservableProp(n,s,e)})),r=(void 0!==t&&t.env,n);return r.enhancer=e,r}var z={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function q(t){return null==t?z:"string"==typeof t?{name:t,deep:!0,proxy:!0}:t}Object.freeze(z);var W=F(L),H=F((function(t,e,n){return null==t||In(t)||bn(t)||Sn(t)||En(t)?t:Array.isArray(t)?J.array(t,{name:n,deep:!1}):b(t)?J.object(t,void 0,{name:n,deep:!1}):S(t)?J.map(t,{name:n,deep:!1}):w(t)?J.set(t,{name:n,deep:!1}):h(!1)})),Y=F(B),G=F((function(t,e,n){return Vn(t,e)?e:t}));function K(t){return t.defaultDecorator?t.defaultDecorator.enhancer:!1===t.deep?B:L}var X={box:function(t,e){arguments.length>2&&Z("box");var n=q(e);return new Ot(t,K(n),n.name,!0,n.equals)},array:function(t,e){arguments.length>2&&Z("array");var n=q(e);return hn(t,K(n),n.name)},map:function(t,e){arguments.length>2&&Z("map");var n=q(e);return new _n(t,K(n),n.name)},set:function(t,e){arguments.length>2&&Z("set");var n=q(e);return new xn(t,K(n),n.name)},object:function(t,e,n){"string"==typeof arguments[1]&&Z("object");var r=q(n);if(!1===r.proxy)return be({},t,e,r);var i=ge(r),o=be({},void 0,void 0,r),s=rn(o);return me(s,t,e,i),s},ref:Y,shallow:H,deep:W,struct:G},J=function(t,e,n){if("string"==typeof arguments[1]||"symbol"==typeof arguments[1])return W.apply(null,arguments);if(Me(t))return t;var r=b(t)?J.object(t,e,n):Array.isArray(t)?J.array(t,e):S(t)?J.map(t,e):w(t)?J.set(t,e):t;if(r!==t)return r;h(!1)};function Z(t){h("Expected one or two arguments to observable."+t+". Did you accidentally try to use observable."+t+" as decorator?")}Object.keys(X).forEach((function(t){return J[t]=X[t]}));var Q,$,tt=k(!1,(function(t,e,n,r,i){var s=n.get,a=n.set,u=i[0]||{};An(t).addComputedProp(t,e,o({get:s,set:a,context:t},u))})),et=tt({equals:C.structural}),nt=function(t,e,n){if("string"==typeof e)return tt.apply(null,arguments);if(null!==t&&"object"==typeof t&&1===arguments.length)return tt.apply(null,arguments);var r="object"==typeof e?e:{};return r.get=t,r.set="function"==typeof e?e:r.set,r.name=r.name||t.name||"",new Tt(r)};nt.struct=et,function(t){t[t.NOT_TRACKING=-1]="NOT_TRACKING",t[t.UP_TO_DATE=0]="UP_TO_DATE",t[t.POSSIBLY_STALE=1]="POSSIBLY_STALE",t[t.STALE=2]="STALE"}(Q||(Q={})),function(t){t[t.NONE=0]="NONE",t[t.LOG=1]="LOG",t[t.BREAK=2]="BREAK"}($||($={}));var rt=function(t){this.cause=t};function it(t){return t instanceof rt}function ot(t){switch(t.dependenciesState){case Q.UP_TO_DATE:return!1;case Q.NOT_TRACKING:case Q.STALE:return!0;case Q.POSSIBLY_STALE:for(var e=pt(!0),n=ft(),r=t.observing,i=r.length,o=0;o<i;o++){var s=r[o];if(Ct(s)){if(kt.disableErrorBoundaries)s.get();else try{s.get()}catch(t){return ht(n),dt(e),!0}if(t.dependenciesState===Q.STALE)return ht(n),dt(e),!0}}return vt(t),ht(n),dt(e),!1}}function st(){return null!==kt.trackingDerivation}function at(t){var e=t.observers.size>0;kt.computationDepth>0&&e&&h(!1),kt.allowStateChanges||!e&&"strict"!==kt.enforceActions||h(!1)}function ut(t,e,n){var r=pt(!0);vt(t),t.newObserving=new Array(t.observing.length+100),t.unboundDepsCount=0,t.runId=++kt.runId;var i,o=kt.trackingDerivation;if(kt.trackingDerivation=t,!0===kt.disableErrorBoundaries)i=e.call(n);else try{i=e.call(n)}catch(t){i=new rt(t)}return kt.trackingDerivation=o,function(t){for(var e=t.observing,n=t.observing=t.newObserving,r=Q.UP_TO_DATE,i=0,o=t.unboundDepsCount,s=0;s<o;s++){0===(a=n[s]).diffValue&&(a.diffValue=1,i!==s&&(n[i]=a),i++),a.dependenciesState>r&&(r=a.dependenciesState)}n.length=i,t.newObserving=null,o=e.length;for(;o--;){0===(a=e[o]).diffValue&&Ft(a,t),a.diffValue=0}for(;i--;){var a;1===(a=n[i]).diffValue&&(a.diffValue=0,Bt(a,t))}r!==Q.UP_TO_DATE&&(t.dependenciesState=r,t.onBecomeStale())}(t),dt(r),i}function ct(t){var e=t.observing;t.observing=[];for(var n=e.length;n--;)Ft(e[n],t);t.dependenciesState=Q.NOT_TRACKING}function lt(t){var e=ft();try{return t()}finally{ht(e)}}function ft(){var t=kt.trackingDerivation;return kt.trackingDerivation=null,t}function ht(t){kt.trackingDerivation=t}function pt(t){var e=kt.allowStateReads;return kt.allowStateReads=t,e}function dt(t){kt.allowStateReads=t}function vt(t){if(t.dependenciesState!==Q.UP_TO_DATE){t.dependenciesState=Q.UP_TO_DATE;for(var e=t.observing,n=e.length;n--;)e[n].lowestObserverState=Q.UP_TO_DATE}}var yt=0,bt=1,gt=Object.getOwnPropertyDescriptor((function(){}),"name");gt&&gt.configurable;function mt(t,e,n){var r=function(){return _t(t,e,n||this,arguments)};return r.isMobxAction=!0,r}function _t(t,e,n,r){var i=St(t,n,r);try{return e.apply(n,r)}catch(t){throw i.error=t,t}finally{wt(i)}}function St(t,e,n){var r=0,i=ft();qt();var o={prevDerivation:i,prevAllowStateChanges:Et(!0),prevAllowStateReads:pt(!0),notifySpy:!1,startTime:r,actionId:bt++,parentActionId:yt};return yt=o.actionId,o}function wt(t){yt!==t.actionId&&h("invalid action stack. did you forget to finish an action?"),yt=t.parentActionId,void 0!==t.error&&(kt.suppressReactionErrors=!0),Rt(t.prevAllowStateChanges),dt(t.prevAllowStateReads),Wt(),ht(t.prevDerivation),t.notifySpy,kt.suppressReactionErrors=!1}function xt(t,e){var n,r=Et(t);try{n=e()}finally{Rt(r)}return n}function Et(t){var e=kt.allowStateChanges;return kt.allowStateChanges=t,e}function Rt(t){kt.allowStateChanges=t}function At(t){var e,n=kt.computationDepth;kt.computationDepth=0;try{e=t()}finally{kt.computationDepth=n}return e}var Ot=function(t){function e(e,n,r,i,o){void 0===r&&(r="ObservableValue@"+f()),void 0===i&&(i=!0),void 0===o&&(o=C.default);var s=t.call(this,r)||this;return s.enhancer=n,s.name=r,s.equals=o,s.hasUnreportedChange=!1,s.value=n(e,void 0,r),s}return function(t,e){function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.dehanceValue=function(t){return void 0!==this.dehancer?this.dehancer(t):t},e.prototype.set=function(t){this.value;if((t=this.prepareNewValue(t))!==kt.UNCHANGED){0,this.setNewValue(t)}},e.prototype.prepareNewValue=function(t){if(at(this),on(this)){var e=an(this,{object:this,type:"update",newValue:t});if(!e)return kt.UNCHANGED;t=e.newValue}return t=this.enhancer(t,this.value,this.name),this.equals(this.value,t)?kt.UNCHANGED:t},e.prototype.setNewValue=function(t){var e=this.value;this.value=t,this.reportChanged(),un(this)&&ln(this,{type:"update",object:this,newValue:t,oldValue:e})},e.prototype.get=function(){return this.reportObserved(),this.dehanceValue(this.value)},e.prototype.intercept=function(t){return sn(this,t)},e.prototype.observe=function(t,e){return e&&t({object:this,type:"update",newValue:this.value,oldValue:void 0}),cn(this,t)},e.prototype.toJSON=function(){return this.get()},e.prototype.toString=function(){return this.name+"["+this.value+"]"},e.prototype.valueOf=function(){return R(this.get())},e.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},e}(O),Pt=m("ObservableValue",Ot),Tt=function(){function t(t){this.dependenciesState=Q.NOT_TRACKING,this.observing=[],this.newObserving=null,this.isBeingObserved=!1,this.isPendingUnobservation=!1,this.observers=new Set,this.diffValue=0,this.runId=0,this.lastAccessedBy=0,this.lowestObserverState=Q.UP_TO_DATE,this.unboundDepsCount=0,this.__mapid="#"+f(),this.value=new rt(null),this.isComputing=!1,this.isRunningSetter=!1,this.isTracing=$.NONE,p(t.get,"missing option for computed: get"),this.derivation=t.get,this.name=t.name||"ComputedValue@"+f(),t.set&&(this.setter=mt(this.name+"-setter",t.set)),this.equals=t.equals||(t.compareStructural||t.struct?C.structural:C.default),this.scope=t.context,this.requiresReaction=!!t.requiresReaction,this.keepAlive=!!t.keepAlive}return t.prototype.onBecomeStale=function(){!function(t){if(t.lowestObserverState!==Q.UP_TO_DATE)return;t.lowestObserverState=Q.POSSIBLY_STALE,t.observers.forEach((function(e){e.dependenciesState===Q.UP_TO_DATE&&(e.dependenciesState=Q.POSSIBLY_STALE,e.isTracing!==$.NONE&&Yt(e,t),e.onBecomeStale())}))}(this)},t.prototype.onBecomeObserved=function(){this.onBecomeObservedListeners&&this.onBecomeObservedListeners.forEach((function(t){return t()}))},t.prototype.onBecomeUnobserved=function(){this.onBecomeUnobservedListeners&&this.onBecomeUnobservedListeners.forEach((function(t){return t()}))},t.prototype.get=function(){this.isComputing&&h("Cycle detected in computation "+this.name+": "+this.derivation),0!==kt.inBatch||0!==this.observers.size||this.keepAlive?(Ht(this),ot(this)&&this.trackAndCompute()&&function(t){if(t.lowestObserverState===Q.STALE)return;t.lowestObserverState=Q.STALE,t.observers.forEach((function(e){e.dependenciesState===Q.POSSIBLY_STALE?e.dependenciesState=Q.STALE:e.dependenciesState===Q.UP_TO_DATE&&(t.lowestObserverState=Q.UP_TO_DATE)}))}(this)):ot(this)&&(this.warnAboutUntrackedRead(),qt(),this.value=this.computeValue(!1),Wt());var t=this.value;if(it(t))throw t.cause;return t},t.prototype.peek=function(){var t=this.computeValue(!1);if(it(t))throw t.cause;return t},t.prototype.set=function(t){if(this.setter){p(!this.isRunningSetter,"The setter of computed value '"+this.name+"' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?"),this.isRunningSetter=!0;try{this.setter.call(this.scope,t)}finally{this.isRunningSetter=!1}}else p(!1,!1)},t.prototype.trackAndCompute=function(){var t=this.value,e=this.dependenciesState===Q.NOT_TRACKING,n=this.computeValue(!0),r=e||it(t)||it(n)||!this.equals(t,n);return r&&(this.value=n),r},t.prototype.computeValue=function(t){var e;if(this.isComputing=!0,kt.computationDepth++,t)e=ut(this,this.derivation,this.scope);else if(!0===kt.disableErrorBoundaries)e=this.derivation.call(this.scope);else try{e=this.derivation.call(this.scope)}catch(t){e=new rt(t)}return kt.computationDepth--,this.isComputing=!1,e},t.prototype.suspend=function(){this.keepAlive||(ct(this),this.value=void 0)},t.prototype.observe=function(t,e){var n=this,r=!0,i=void 0;return ue((function(){var o=n.get();if(!r||e){var s=ft();t({type:"update",object:n,newValue:o,oldValue:i}),ht(s)}r=!1,i=o}))},t.prototype.warnAboutUntrackedRead=function(){},t.prototype.toJSON=function(){return this.get()},t.prototype.toString=function(){return this.name+"["+this.derivation.toString()+"]"},t.prototype.valueOf=function(){return R(this.get())},t.prototype[Symbol.toPrimitive]=function(){return this.valueOf()},t}(),Ct=m("ComputedValue",Tt),It=["mobxGuid","spyListeners","enforceActions","computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","allowStateReads","disableErrorBoundaries","runId","UNCHANGED"],Nt=function(){this.version=5,this.UNCHANGED={},this.trackingDerivation=null,this.computationDepth=0,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!0,this.allowStateReads=!0,this.enforceActions=!1,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.computedConfigurable=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1},jt={};function Dt(){return"undefined"!=typeof window?window:void 0!==r?r:"undefined"!=typeof self?self:jt}var Mt=!0,Vt=!1,kt=function(){var t=Dt();return t.__mobxInstanceCount>0&&!t.__mobxGlobals&&(Mt=!1),t.__mobxGlobals&&t.__mobxGlobals.version!==(new Nt).version&&(Mt=!1),Mt?t.__mobxGlobals?(t.__mobxInstanceCount+=1,t.__mobxGlobals.UNCHANGED||(t.__mobxGlobals.UNCHANGED={}),t.__mobxGlobals):(t.__mobxInstanceCount=1,t.__mobxGlobals=new Nt):(setTimeout((function(){Vt||h("There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`")}),1),new Nt)}();function Ut(){return kt}function Lt(){var t=new Nt;for(var e in t)-1===It.indexOf(e)&&(kt[e]=t[e]);kt.allowStateChanges=!kt.enforceActions}function Bt(t,e){t.observers.add(e),t.lowestObserverState>e.dependenciesState&&(t.lowestObserverState=e.dependenciesState)}function Ft(t,e){t.observers.delete(e),0===t.observers.size&&zt(t)}function zt(t){!1===t.isPendingUnobservation&&(t.isPendingUnobservation=!0,kt.pendingUnobservations.push(t))}function qt(){kt.inBatch++}function Wt(){if(0==--kt.inBatch){Jt();for(var t=kt.pendingUnobservations,e=0;e<t.length;e++){var n=t[e];n.isPendingUnobservation=!1,0===n.observers.size&&(n.isBeingObserved&&(n.isBeingObserved=!1,n.onBecomeUnobserved()),n instanceof Tt&&n.suspend())}kt.pendingUnobservations=[]}}function Ht(t){var e=kt.trackingDerivation;return null!==e?(e.runId!==t.lastAccessedBy&&(t.lastAccessedBy=e.runId,e.newObserving[e.unboundDepsCount++]=t,t.isBeingObserved||(t.isBeingObserved=!0,t.onBecomeObserved())),!0):(0===t.observers.size&&kt.inBatch>0&&zt(t),!1)}function Yt(t,e){if(console.log("[mobx.trace] '"+t.name+"' is invalidated due to a change in: '"+e.name+"'"),t.isTracing===$.BREAK){var n=[];!function t(e,n,r){if(n.length>=1e3)return void n.push("(and many more)");n.push(""+new Array(r).join("\t")+e.name),e.dependencies&&e.dependencies.forEach((function(e){return t(e,n,r+1)}))}(_e(t),n,1),new Function("debugger;\n/*\nTracing '"+t.name+"'\n\nYou are entering this break point because derivation '"+t.name+"' is being traced and '"+e.name+"' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n"+(t instanceof Tt?t.derivation.toString().replace(/[*]\//g,"/"):"")+"\n\nThe dependencies for this derivation are:\n\n"+n.join("\n")+"\n*/\n    ")()}}var Gt=function(){function t(t,e,n,r){void 0===t&&(t="Reaction@"+f()),void 0===r&&(r=!1),this.name=t,this.onInvalidate=e,this.errorHandler=n,this.requiresObservable=r,this.observing=[],this.newObserving=[],this.dependenciesState=Q.NOT_TRACKING,this.diffValue=0,this.runId=0,this.unboundDepsCount=0,this.__mapid="#"+f(),this.isDisposed=!1,this._isScheduled=!1,this._isTrackPending=!1,this._isRunning=!1,this.isTracing=$.NONE}return t.prototype.onBecomeStale=function(){this.schedule()},t.prototype.schedule=function(){this._isScheduled||(this._isScheduled=!0,kt.pendingReactions.push(this),Jt())},t.prototype.isScheduled=function(){return this._isScheduled},t.prototype.runReaction=function(){if(!this.isDisposed){if(qt(),this._isScheduled=!1,ot(this)){this._isTrackPending=!0;try{this.onInvalidate(),this._isTrackPending}catch(t){this.reportExceptionInDerivation(t)}}Wt()}},t.prototype.track=function(t){if(!this.isDisposed){qt();0,this._isRunning=!0;var e=ut(this,t,void 0);this._isRunning=!1,this._isTrackPending=!1,this.isDisposed&&ct(this),it(e)&&this.reportExceptionInDerivation(e.cause),Wt()}},t.prototype.reportExceptionInDerivation=function(t){var e=this;if(this.errorHandler)this.errorHandler(t,this);else{if(kt.disableErrorBoundaries)throw t;var n="[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '"+this+"'";kt.suppressReactionErrors?console.warn("[mobx] (error in reaction '"+this.name+"' suppressed, fix error of causing action below)"):console.error(n,t),kt.globalReactionErrorHandlers.forEach((function(n){return n(t,e)}))}},t.prototype.dispose=function(){this.isDisposed||(this.isDisposed=!0,this._isRunning||(qt(),ct(this),Wt()))},t.prototype.getDisposer=function(){var t=this.dispose.bind(this);return t[A]=this,t},t.prototype.toString=function(){return"Reaction["+this.name+"]"},t.prototype.trace=function(t){void 0===t&&(t=!1),Ke(this,t)},t}();function Kt(t){return kt.globalReactionErrorHandlers.push(t),function(){var e=kt.globalReactionErrorHandlers.indexOf(t);e>=0&&kt.globalReactionErrorHandlers.splice(e,1)}}var Xt=function(t){return t()};function Jt(){kt.inBatch>0||kt.isRunningReactions||Xt(Zt)}function Zt(){kt.isRunningReactions=!0;for(var t=kt.pendingReactions,e=0;t.length>0;){100==++e&&(console.error("Reaction doesn't converge to a stable state after 100 iterations. Probably there is a cycle in the reactive function: "+t[0]),t.splice(0));for(var n=t.splice(0),r=0,i=n.length;r<i;r++)n[r].runReaction()}kt.isRunningReactions=!1}var Qt=m("Reaction",Gt);function $t(t){var e=Xt;Xt=function(n){return t((function(){return e(n)}))}}function te(t){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}}function ee(){h(!1)}function ne(t){return function(e,n,r){if(r){if(r.value)return{value:mt(t,r.value),enumerable:!1,configurable:!0,writable:!0};var i=r.initializer;return{enumerable:!1,configurable:!0,writable:!0,initializer:function(){return mt(t,i.call(this))}}}return re(t).apply(this,arguments)}}function re(t){return function(e,n,r){Object.defineProperty(e,n,{configurable:!0,enumerable:!1,get:function(){},set:function(e){g(this,n,ie(t,e))}})}}var ie=function(t,e,n,r){return 1===arguments.length&&"function"==typeof t?mt(t.name||"<unnamed action>",t):2===arguments.length&&"function"==typeof e?mt(t,e):1===arguments.length&&"string"==typeof t?ne(t):!0!==r?ne(e).apply(null,arguments):void g(t,e,mt(t.name||e,n.value,this))};function oe(t,e){return _t("string"==typeof t?t:t.name||"<unnamed action>","function"==typeof t?t:e,this,void 0)}function se(t){return"function"==typeof t&&!0===t.isMobxAction}function ae(t,e,n){g(t,e,mt(e,n.bind(t)))}function ue(t,e){void 0===e&&(e=l);var n,r=e&&e.name||t.name||"Autorun@"+f();if(!e.scheduler&&!e.delay)n=new Gt(r,(function(){this.track(s)}),e.onError,e.requiresObservable);else{var i=le(e),o=!1;n=new Gt(r,(function(){o||(o=!0,i((function(){o=!1,n.isDisposed||n.track(s)})))}),e.onError,e.requiresObservable)}function s(){t(n)}return n.schedule(),n.getDisposer()}ie.bound=function(t,e,n,r){return!0===r?(ae(t,e,n.value),null):n?{configurable:!0,enumerable:!1,get:function(){return ae(this,e,n.value||n.initializer.call(this)),this[e]},set:ee}:{enumerable:!1,configurable:!0,set:function(t){ae(this,e,t)},get:function(){}}};var ce=function(t){return t()};function le(t){return t.scheduler?t.scheduler:t.delay?function(e){return setTimeout(e,t.delay)}:ce}function fe(t,e,n){void 0===n&&(n=l);var r,i,o,s=n.name||"Reaction@"+f(),a=ie(s,n.onError?(r=n.onError,i=e,function(){try{return i.apply(this,arguments)}catch(t){r.call(this,t)}}):e),u=!n.scheduler&&!n.delay,c=le(n),h=!0,p=!1,d=n.compareStructural?C.structural:n.equals||C.default,v=new Gt(s,(function(){h||u?y():p||(p=!0,c(y))}),n.onError,n.requiresObservable);function y(){if(p=!1,!v.isDisposed){var e=!1;v.track((function(){var n=t(v);e=h||!d(o,n),o=n})),h&&n.fireImmediately&&a(o,v),h||!0!==e||a(o,v),h&&(h=!1)}}return v.schedule(),v.getDisposer()}function he(t,e,n){return de("onBecomeObserved",t,e,n)}function pe(t,e,n){return de("onBecomeUnobserved",t,e,n)}function de(t,e,n,r){var i="function"==typeof r?Nn(e,n):Nn(e),o="function"==typeof r?r:n,s=t+"Listeners";return i[s]?i[s].add(o):i[s]=new Set([o]),"function"!=typeof i[t]?h(!1):function(){var t=i[s];t&&(t.delete(o),0===t.size&&delete i[s])}}function ve(t){var e=t.enforceActions,n=t.computedRequiresReaction,r=t.computedConfigurable,i=t.disableErrorBoundaries,o=t.reactionScheduler,s=t.reactionRequiresObservable,a=t.observableRequiresReaction;if(!0===t.isolateGlobalState&&((kt.pendingReactions.length||kt.inBatch||kt.isRunningReactions)&&h("isolateGlobalState should be called before MobX is running any reactions"),Vt=!0,Mt&&(0==--Dt().__mobxInstanceCount&&(Dt().__mobxGlobals=void 0),kt=new Nt)),void 0!==e){var u=void 0;switch(e){case!0:case"observed":u=!0;break;case!1:case"never":u=!1;break;case"strict":case"always":u="strict";break;default:h("Invalid value for 'enforceActions': '"+e+"', expected 'never', 'always' or 'observed'")}kt.enforceActions=u,kt.allowStateChanges=!0!==u&&"strict"!==u}void 0!==n&&(kt.computedRequiresReaction=!!n),void 0!==s&&(kt.reactionRequiresObservable=!!s),void 0!==a&&(kt.observableRequiresReaction=!!a,kt.allowStateReads=!kt.observableRequiresReaction),void 0!==r&&(kt.computedConfigurable=!!r),void 0!==i&&(!0===i&&console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled."),kt.disableErrorBoundaries=!!i),o&&$t(o)}function ye(t,e){var n="function"==typeof t?t.prototype:t,r=function(t){var r=e[t];Array.isArray(r)||(r=[r]);var i=Object.getOwnPropertyDescriptor(n,t),o=r.reduce((function(e,r){return r(n,t,e)}),i);o&&Object.defineProperty(n,t,o)};for(var i in e)r(i);return t}function be(t,e,n,r){var i=ge(r=q(r));return V(t),An(t,r.name,i.enhancer),e&&me(t,e,n,i),t}function ge(t){return t.defaultDecorator||(!1===t.deep?Y:W)}function me(t,e,n,r){var i,o;qt();try{var a=x(e);try{for(var u=s(a),c=u.next();!c.done;c=u.next()){var l=c.value,f=Object.getOwnPropertyDescriptor(e,l);0;var h=(n&&l in n?n[l]:f.get?tt:r)(t,l,f,!0);h&&Object.defineProperty(t,l,h)}}catch(t){i={error:t}}finally{try{c&&!c.done&&(o=u.return)&&o.call(u)}finally{if(i)throw i.error}}}finally{Wt()}}function _e(t,e){return Se(Nn(t,e))}function Se(t){var e,n,r={name:t.name};return t.observing&&t.observing.length>0&&(r.dependencies=(e=t.observing,n=[],e.forEach((function(t){-1===n.indexOf(t)&&n.push(t)})),n).map(Se)),r}function we(t,e){return xe(Nn(t,e))}function xe(t){var e={name:t.name};return function(t){return t.observers&&t.observers.size>0}(t)&&(e.observers=Array.from(function(t){return t.observers}(t)).map(xe)),e}var Ee=0;function Re(){this.message="FLOW_CANCELLED"}function Ae(t){return t instanceof Re}function Oe(t){1!==arguments.length&&h("Flow expects 1 argument and cannot be used as decorator");var e=t.name||"<unnamed flow>";return function(){var n,r=this,i=arguments,o=++Ee,s=ie(e+" - runid: "+o+" - init",t).apply(r,i),a=void 0,u=new Promise((function(t,r){var i=0;function u(t){var n;a=void 0;try{n=ie(e+" - runid: "+o+" - yield "+i++,s.next).call(s,t)}catch(t){return r(t)}l(n)}function c(t){var n;a=void 0;try{n=ie(e+" - runid: "+o+" - yield "+i++,s.throw).call(s,t)}catch(t){return r(t)}l(n)}function l(e){if(!e||"function"!=typeof e.then)return e.done?t(e.value):(a=Promise.resolve(e.value)).then(u,c);e.then(l,r)}n=r,u(void 0)}));return u.cancel=ie(e+" - runid: "+o+" - cancel",(function(){try{a&&Pe(a);var t=s.return(void 0),e=Promise.resolve(t.value);e.then(v,v),Pe(e),n(new Re)}catch(t){n(t)}})),u}}function Pe(t){"function"==typeof t.cancel&&t.cancel()}function Te(t,e,n){var r;if(Sn(t)||bn(t)||Pt(t))r=jn(t);else{if(!In(t))return h(!1);if("string"!=typeof e)return h(!1);r=jn(t,e)}return void 0!==r.dehancer?h(!1):(r.dehancer="function"==typeof e?e:n,function(){r.dehancer=void 0})}function Ce(t,e,n){return"function"==typeof n?function(t,e,n){return jn(t,e).intercept(n)}(t,e,n):function(t,e){return jn(t).intercept(e)}(t,e)}function Ie(t,e){if(null==t)return!1;if(void 0!==e){if(!1===In(t))return!1;if(!t[A].values.has(e))return!1;var n=Nn(t,e);return Ct(n)}return Ct(t)}function Ne(t){return arguments.length>1?h(!1):Ie(t)}function je(t,e){return"string"!=typeof e?h(!1):Ie(t,e)}function De(t,e){return null!=t&&(void 0!==e?!!In(t)&&t[A].values.has(e):In(t)||!!t[A]||P(t)||Qt(t)||Ct(t))}function Me(t){return 1!==arguments.length&&h(!1),De(t)}function Ve(t,e){return"string"!=typeof e?h(!1):De(t,e)}function ke(t){return In(t)?t[A].getKeys():Sn(t)||En(t)?Array.from(t.keys()):bn(t)?t.map((function(t,e){return e})):h(!1)}function Ue(t){return In(t)?ke(t).map((function(e){return t[e]})):Sn(t)?ke(t).map((function(e){return t.get(e)})):En(t)?Array.from(t.values()):bn(t)?t.slice():h(!1)}function Le(t){return In(t)?ke(t).map((function(e){return[e,t[e]]})):Sn(t)?ke(t).map((function(e){return[e,t.get(e)]})):En(t)?Array.from(t.entries()):bn(t)?t.map((function(t,e){return[e,t]})):h(!1)}function Be(t,e,n){if(2!==arguments.length||En(t))if(In(t)){var r=t[A],i=r.values.get(e);i?r.write(e,n):r.addObservableProp(e,n,r.defaultEnhancer)}else if(Sn(t))t.set(e,n);else if(En(t))t.add(e);else{if(!bn(t))return h(!1);"number"!=typeof e&&(e=parseInt(e,10)),p(e>=0,"Not a valid index: '"+e+"'"),qt(),e>=t.length&&(t.length=e+1),t[e]=n,Wt()}else{qt();var o=e;try{for(var s in o)Be(t,s,o[s])}finally{Wt()}}}function Fe(t,e){if(In(t))t[A].remove(e);else if(Sn(t))t.delete(e);else if(En(t))t.delete(e);else{if(!bn(t))return h(!1);"number"!=typeof e&&(e=parseInt(e,10)),p(e>=0,"Not a valid index: '"+e+"'"),t.splice(e,1)}}function ze(t,e){return In(t)?jn(t).has(e):Sn(t)||En(t)?t.has(e):bn(t)?e>=0&&e<t.length:h(!1)}function qe(t,e){if(ze(t,e))return In(t)?t[e]:Sn(t)?t.get(e):bn(t)?t[e]:h(!1)}function We(t,e,n,r){return"function"==typeof n?function(t,e,n,r){return jn(t,e).observe(n,r)}(t,e,n,r):function(t,e,n){return jn(t).observe(e,n)}(t,e,n)}Re.prototype=Object.create(Error.prototype);var He={detectCycles:!0,exportMapsAsObjects:!0,recurseEverything:!1};function Ye(t,e,n,r){return r.detectCycles&&t.set(e,n),n}function Ge(t,e){var n;return"boolean"==typeof e&&(e={detectCycles:e}),e||(e=He),e.detectCycles=void 0===e.detectCycles?!0===e.recurseEverything:!0===e.detectCycles,e.detectCycles&&(n=new Map),function t(e,n,r){if(!n.recurseEverything&&!Me(e))return e;if("object"!=typeof e)return e;if(null===e)return null;if(e instanceof Date)return e;if(Pt(e))return t(e.get(),n,r);if(Me(e)&&ke(e),!0===n.detectCycles&&null!==e&&r.has(e))return r.get(e);if(bn(e)||Array.isArray(e)){var i=Ye(r,e,[],n),o=e.map((function(e){return t(e,n,r)}));i.length=o.length;for(var s=0,a=o.length;s<a;s++)i[s]=o[s];return i}if(En(e)||Object.getPrototypeOf(e)===Set.prototype){if(!1===n.exportMapsAsObjects){var u=Ye(r,e,new Set,n);return e.forEach((function(e){u.add(t(e,n,r))})),u}var c=Ye(r,e,[],n);return e.forEach((function(e){c.push(t(e,n,r))})),c}if(Sn(e)||Object.getPrototypeOf(e)===Map.prototype){if(!1===n.exportMapsAsObjects){var l=Ye(r,e,new Map,n);return e.forEach((function(e,i){l.set(i,t(e,n,r))})),l}var f=Ye(r,e,{},n);return e.forEach((function(e,i){f[i]=t(e,n,r)})),f}var h=Ye(r,e,{},n);return x(e).forEach((function(i){h[i]=t(e[i],n,r)})),h}(t,e,n)}function Ke(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=!1;"boolean"==typeof t[t.length-1]&&(n=t.pop());var r=Xe(t);if(!r)return h(!1);r.isTracing===$.NONE&&console.log("[mobx.trace] '"+r.name+"' tracing enabled"),r.isTracing=n?$.BREAK:$.LOG}function Xe(t){switch(t.length){case 0:return kt.trackingDerivation;case 1:return Nn(t[0]);case 2:return Nn(t[0],t[1])}}function Je(t,e){void 0===e&&(e=void 0),qt();try{return t.apply(e)}finally{Wt()}}function Ze(t,e,n){return 1===arguments.length||e&&"object"==typeof e?$e(t,e):Qe(t,e,n||{})}function Qe(t,e,n){var r;"number"==typeof n.timeout&&(r=setTimeout((function(){if(!o[A].isDisposed){o();var t=new Error("WHEN_TIMEOUT");if(!n.onError)throw t;n.onError(t)}}),n.timeout)),n.name=n.name||"When@"+f();var i=mt(n.name+"-effect",e),o=ue((function(e){t()&&(e.dispose(),r&&clearTimeout(r),i())}),n);return o}function $e(t,e){var n;var r=new Promise((function(r,i){var s=Qe(t,r,o(o({},e),{onError:i}));n=function(){s(),i("WHEN_CANCELLED")}}));return r.cancel=n,r}function tn(t){return t[A]}function en(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t}var nn={has:function(t,e){if(e===A||"constructor"===e||e===I)return!0;var n=tn(t);return en(e)?n.has(e):e in t},get:function(t,e){if(e===A||"constructor"===e||e===I)return t[e];var n=tn(t),r=n.values.get(e);if(r instanceof O){var i=r.get();return void 0===i&&n.has(e),i}return en(e)&&n.has(e),t[e]},set:function(t,e,n){return!!en(e)&&(Be(t,e,n),!0)},deleteProperty:function(t,e){return!!en(e)&&(tn(t).remove(e),!0)},ownKeys:function(t){return tn(t).keysAtom.reportObserved(),Reflect.ownKeys(t)},preventExtensions:function(t){return h("Dynamic observable objects cannot be frozen"),!1}};function rn(t){var e=new Proxy(t,nn);return t[A].proxy=e,e}function on(t){return void 0!==t.interceptors&&t.interceptors.length>0}function sn(t,e){var n=t.interceptors||(t.interceptors=[]);return n.push(e),d((function(){var t=n.indexOf(e);-1!==t&&n.splice(t,1)}))}function an(t,e){var n=ft();try{for(var r=u(t.interceptors||[]),i=0,o=r.length;i<o&&(p(!(e=r[i](e))||e.type,"Intercept handlers should return nothing or a change object"),e);i++);return e}finally{ht(n)}}function un(t){return void 0!==t.changeListeners&&t.changeListeners.length>0}function cn(t,e){var n=t.changeListeners||(t.changeListeners=[]);return n.push(e),d((function(){var t=n.indexOf(e);-1!==t&&n.splice(t,1)}))}function ln(t,e){var n=ft(),r=t.changeListeners;if(r){for(var i=0,o=(r=r.slice()).length;i<o;i++)r[i](e);ht(n)}}var fn={get:function(t,e){return e===A?t[A]:"length"===e?t[A].getArrayLength():"number"==typeof e?dn.get.call(t,e):"string"!=typeof e||isNaN(e)?dn.hasOwnProperty(e)?dn[e]:t[e]:dn.get.call(t,parseInt(e))},set:function(t,e,n){return"length"===e&&t[A].setArrayLength(n),"number"==typeof e&&dn.set.call(t,e,n),"symbol"==typeof e||isNaN(e)?t[e]=n:dn.set.call(t,parseInt(e),n),!0},preventExtensions:function(t){return h("Observable arrays cannot be frozen"),!1}};function hn(t,e,n,r){void 0===n&&(n="ObservableArray@"+f()),void 0===r&&(r=!1);var i,o,s,a=new pn(n,e,r);i=a.values,o=A,s=a,Object.defineProperty(i,o,{enumerable:!1,writable:!1,configurable:!0,value:s});var u=new Proxy(a.values,fn);if(a.proxy=u,t&&t.length){var c=Et(!0);a.spliceWithArray(0,0,t),Rt(c)}return u}var pn=function(){function t(t,e,n){this.owned=n,this.values=[],this.proxy=void 0,this.lastKnownLength=0,this.atom=new O(t||"ObservableArray@"+f()),this.enhancer=function(n,r){return e(n,r,t+"[..]")}}return t.prototype.dehanceValue=function(t){return void 0!==this.dehancer?this.dehancer(t):t},t.prototype.dehanceValues=function(t){return void 0!==this.dehancer&&t.length>0?t.map(this.dehancer):t},t.prototype.intercept=function(t){return sn(this,t)},t.prototype.observe=function(t,e){return void 0===e&&(e=!1),e&&t({object:this.proxy,type:"splice",index:0,added:this.values.slice(),addedCount:this.values.length,removed:[],removedCount:0}),cn(this,t)},t.prototype.getArrayLength=function(){return this.atom.reportObserved(),this.values.length},t.prototype.setArrayLength=function(t){if("number"!=typeof t||t<0)throw new Error("[mobx.array] Out of range: "+t);var e=this.values.length;if(t!==e)if(t>e){for(var n=new Array(t-e),r=0;r<t-e;r++)n[r]=void 0;this.spliceWithArray(e,0,n)}else this.spliceWithArray(t,e-t)},t.prototype.updateArrayLength=function(t,e){if(t!==this.lastKnownLength)throw new Error("[mobx] Modification exception: the internal structure of an observable array was changed.");this.lastKnownLength+=e},t.prototype.spliceWithArray=function(t,e,n){var r=this;at(this.atom);var i=this.values.length;if(void 0===t?t=0:t>i?t=i:t<0&&(t=Math.max(0,i+t)),e=1===arguments.length?i-t:null==e?0:Math.max(0,Math.min(e,i-t)),void 0===n&&(n=c),on(this)){var o=an(this,{object:this.proxy,type:"splice",index:t,removedCount:e,added:n});if(!o)return c;e=o.removedCount,n=o.added}n=0===n.length?n:n.map((function(t){return r.enhancer(t,void 0)}));var s=this.spliceItemsIntoValues(t,e,n);return 0===e&&0===n.length||this.notifyArraySplice(t,n,s),this.dehanceValues(s)},t.prototype.spliceItemsIntoValues=function(t,e,n){var r;if(n.length<1e4)return(r=this.values).splice.apply(r,u([t,e],n));var i=this.values.slice(t,t+e);return this.values=this.values.slice(0,t).concat(n,this.values.slice(t+e)),i},t.prototype.notifyArrayChildUpdate=function(t,e,n){var r=!this.owned&&!1,i=un(this),o=i||r?{object:this.proxy,type:"update",index:t,newValue:e,oldValue:n}:null;this.atom.reportChanged(),i&&ln(this,o)},t.prototype.notifyArraySplice=function(t,e,n){var r=!this.owned&&!1,i=un(this),o=i||r?{object:this.proxy,type:"splice",index:t,removed:n,added:e,removedCount:n.length,addedCount:e.length}:null;this.atom.reportChanged(),i&&ln(this,o)},t}(),dn={intercept:function(t){return this[A].intercept(t)},observe:function(t,e){return void 0===e&&(e=!1),this[A].observe(t,e)},clear:function(){return this.splice(0)},replace:function(t){var e=this[A];return e.spliceWithArray(0,e.values.length,t)},toJS:function(){return this.slice()},toJSON:function(){return this.toJS()},splice:function(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];var i=this[A];switch(arguments.length){case 0:return[];case 1:return i.spliceWithArray(t);case 2:return i.spliceWithArray(t,e)}return i.spliceWithArray(t,e,n)},spliceWithArray:function(t,e,n){return this[A].spliceWithArray(t,e,n)},push:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=this[A];return n.spliceWithArray(n.values.length,0,t),n.values.length},pop:function(){return this.splice(Math.max(this[A].values.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=this[A];return n.spliceWithArray(0,0,t),n.values.length},reverse:function(){var t=this.slice();return t.reverse.apply(t,arguments)},sort:function(t){var e=this.slice();return e.sort.apply(e,arguments)},remove:function(t){var e=this[A],n=e.dehanceValues(e.values).indexOf(t);return n>-1&&(this.splice(n,1),!0)},get:function(t){var e=this[A];if(e){if(t<e.values.length)return e.atom.reportObserved(),e.dehanceValue(e.values[t]);console.warn("[mobx.array] Attempt to read an array index ("+t+") that is out of bounds ("+e.values.length+"). Please check length first. Out of bound indices will not be tracked by MobX")}},set:function(t,e){var n=this[A],r=n.values;if(t<r.length){at(n.atom);var i=r[t];if(on(n)){var o=an(n,{type:"update",object:n.proxy,index:t,newValue:e});if(!o)return;e=o.newValue}(e=n.enhancer(e,i))!==i&&(r[t]=e,n.notifyArrayChildUpdate(t,e,i))}else{if(t!==r.length)throw new Error("[mobx.array] Index out of bounds, "+t+" is larger than "+r.length);n.spliceWithArray(t,0,[e])}}};["concat","every","filter","forEach","indexOf","join","lastIndexOf","map","reduce","reduceRight","slice","some","toString","toLocaleString"].forEach((function(t){dn[t]=function(){var e=this[A];e.atom.reportObserved();var n=e.dehanceValues(e.values);return n[t].apply(n,arguments)}}));var vn,yn=m("ObservableArrayAdministration",pn);function bn(t){return y(t)&&yn(t[A])}var gn,mn={},_n=function(){function t(t,e,n){if(void 0===e&&(e=L),void 0===n&&(n="ObservableMap@"+f()),this.enhancer=e,this.name=n,this[vn]=mn,this._keysAtom=T(this.name+".keys()"),this[Symbol.toStringTag]="Map","function"!=typeof Map)throw new Error("mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js");this._data=new Map,this._hasMap=new Map,this.merge(t)}return t.prototype._has=function(t){return this._data.has(t)},t.prototype.has=function(t){var e=this;if(!kt.trackingDerivation)return this._has(t);var n=this._hasMap.get(t);if(!n){var r=n=new Ot(this._has(t),B,this.name+"."+E(t)+"?",!1);this._hasMap.set(t,r),pe(r,(function(){return e._hasMap.delete(t)}))}return n.get()},t.prototype.set=function(t,e){var n=this._has(t);if(on(this)){var r=an(this,{type:n?"update":"add",object:this,newValue:e,name:t});if(!r)return this;e=r.newValue}return n?this._updateValue(t,e):this._addValue(t,e),this},t.prototype.delete=function(t){var e=this;if(on(this)&&!(r=an(this,{type:"delete",object:this,name:t})))return!1;if(this._has(t)){var n=un(this),r=n?{type:"delete",object:this,oldValue:this._data.get(t).value,name:t}:null;return Je((function(){e._keysAtom.reportChanged(),e._updateHasMapEntry(t,!1),e._data.get(t).setNewValue(void 0),e._data.delete(t)})),n&&ln(this,r),!0}return!1},t.prototype._updateHasMapEntry=function(t,e){var n=this._hasMap.get(t);n&&n.setNewValue(e)},t.prototype._updateValue=function(t,e){var n=this._data.get(t);if((e=n.prepareNewValue(e))!==kt.UNCHANGED){var r=un(this),i=r?{type:"update",object:this,oldValue:n.value,name:t,newValue:e}:null;0,n.setNewValue(e),r&&ln(this,i)}},t.prototype._addValue=function(t,e){var n=this;at(this._keysAtom),Je((function(){var r=new Ot(e,n.enhancer,n.name+"."+E(t),!1);n._data.set(t,r),e=r.value,n._updateHasMapEntry(t,!0),n._keysAtom.reportChanged()}));var r=un(this),i=r?{type:"add",object:this,name:t,newValue:e}:null;r&&ln(this,i)},t.prototype.get=function(t){return this.has(t)?this.dehanceValue(this._data.get(t).get()):this.dehanceValue(void 0)},t.prototype.dehanceValue=function(t){return void 0!==this.dehancer?this.dehancer(t):t},t.prototype.keys=function(){return this._keysAtom.reportObserved(),this._data.keys()},t.prototype.values=function(){var t=this,e=0,n=Array.from(this.keys());return Ln({next:function(){return e<n.length?{value:t.get(n[e++]),done:!1}:{done:!0}}})},t.prototype.entries=function(){var t=this,e=0,n=Array.from(this.keys());return Ln({next:function(){if(e<n.length){var r=n[e++];return{value:[r,t.get(r)],done:!1}}return{done:!0}}})},t.prototype[(vn=A,Symbol.iterator)]=function(){return this.entries()},t.prototype.forEach=function(t,e){var n,r;try{for(var i=s(this),o=i.next();!o.done;o=i.next()){var u=a(o.value,2),c=u[0],l=u[1];t.call(e,l,c,this)}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},t.prototype.merge=function(t){var e=this;return Sn(t)&&(t=t.toJS()),Je((function(){b(t)?x(t).forEach((function(n){return e.set(n,t[n])})):Array.isArray(t)?t.forEach((function(t){var n=a(t,2),r=n[0],i=n[1];return e.set(r,i)})):S(t)?(t.constructor!==Map&&h("Cannot initialize from classes that inherit from Map: "+t.constructor.name),t.forEach((function(t,n){return e.set(n,t)}))):null!=t&&h("Cannot initialize map from "+t)})),this},t.prototype.clear=function(){var t=this;Je((function(){lt((function(){var e,n;try{for(var r=s(t.keys()),i=r.next();!i.done;i=r.next()){var o=i.value;t.delete(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}}))}))},t.prototype.replace=function(t){var e=this;return Je((function(){var n,r=b(n=t)?Object.keys(n):Array.isArray(n)?n.map((function(t){return a(t,1)[0]})):S(n)||Sn(n)?Array.from(n.keys()):h("Cannot get keys from '"+n+"'");Array.from(e.keys()).filter((function(t){return-1===r.indexOf(t)})).forEach((function(t){return e.delete(t)})),e.merge(t)})),this},Object.defineProperty(t.prototype,"size",{get:function(){return this._keysAtom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),t.prototype.toPOJO=function(){var t,e,n={};try{for(var r=s(this),i=r.next();!i.done;i=r.next()){var o=a(i.value,2),u=o[0],c=o[1];n["symbol"==typeof u?u:E(u)]=c}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}return n},t.prototype.toJS=function(){return new Map(this)},t.prototype.toJSON=function(){return this.toPOJO()},t.prototype.toString=function(){var t=this;return this.name+"[{ "+Array.from(this.keys()).map((function(e){return E(e)+": "+t.get(e)})).join(", ")+" }]"},t.prototype.observe=function(t,e){return cn(this,t)},t.prototype.intercept=function(t){return sn(this,t)},t}(),Sn=m("ObservableMap",_n),wn={},xn=function(){function t(t,e,n){if(void 0===e&&(e=L),void 0===n&&(n="ObservableSet@"+f()),this.name=n,this[gn]=wn,this._data=new Set,this._atom=T(this.name),this[Symbol.toStringTag]="Set","function"!=typeof Set)throw new Error("mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js");this.enhancer=function(t,r){return e(t,r,n)},t&&this.replace(t)}return t.prototype.dehanceValue=function(t){return void 0!==this.dehancer?this.dehancer(t):t},t.prototype.clear=function(){var t=this;Je((function(){lt((function(){var e,n;try{for(var r=s(t._data.values()),i=r.next();!i.done;i=r.next()){var o=i.value;t.delete(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}}))}))},t.prototype.forEach=function(t,e){var n,r;try{for(var i=s(this),o=i.next();!o.done;o=i.next()){var a=o.value;t.call(e,a,a,this)}}catch(t){n={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(n)throw n.error}}},Object.defineProperty(t.prototype,"size",{get:function(){return this._atom.reportObserved(),this._data.size},enumerable:!0,configurable:!0}),t.prototype.add=function(t){var e=this;if((at(this._atom),on(this))&&!(r=an(this,{type:"add",object:this,newValue:t})))return this;if(!this.has(t)){Je((function(){e._data.add(e.enhancer(t,void 0)),e._atom.reportChanged()}));var n=un(this),r=n?{type:"add",object:this,newValue:t}:null;0,n&&ln(this,r)}return this},t.prototype.delete=function(t){var e=this;if(on(this)&&!(r=an(this,{type:"delete",object:this,oldValue:t})))return!1;if(this.has(t)){var n=un(this),r=n?{type:"delete",object:this,oldValue:t}:null;return Je((function(){e._atom.reportChanged(),e._data.delete(t)})),n&&ln(this,r),!0}return!1},t.prototype.has=function(t){return this._atom.reportObserved(),this._data.has(this.dehanceValue(t))},t.prototype.entries=function(){var t=0,e=Array.from(this.keys()),n=Array.from(this.values());return Ln({next:function(){var r=t;return t+=1,r<n.length?{value:[e[r],n[r]],done:!1}:{done:!0}}})},t.prototype.keys=function(){return this.values()},t.prototype.values=function(){this._atom.reportObserved();var t=this,e=0,n=Array.from(this._data.values());return Ln({next:function(){return e<n.length?{value:t.dehanceValue(n[e++]),done:!1}:{done:!0}}})},t.prototype.replace=function(t){var e=this;return En(t)&&(t=t.toJS()),Je((function(){Array.isArray(t)||w(t)?(e.clear(),t.forEach((function(t){return e.add(t)}))):null!=t&&h("Cannot initialize set from "+t)})),this},t.prototype.observe=function(t,e){return cn(this,t)},t.prototype.intercept=function(t){return sn(this,t)},t.prototype.toJS=function(){return new Set(this)},t.prototype.toString=function(){return this.name+"[ "+Array.from(this).join(", ")+" ]"},t.prototype[(gn=A,Symbol.iterator)]=function(){return this.values()},t}(),En=m("ObservableSet",xn),Rn=function(){function t(t,e,n,r){void 0===e&&(e=new Map),this.target=t,this.values=e,this.name=n,this.defaultEnhancer=r,this.keysAtom=new O(n+".keys")}return t.prototype.read=function(t){return this.values.get(t).get()},t.prototype.write=function(t,e){var n=this.target,r=this.values.get(t);if(r instanceof Tt)r.set(e);else{if(on(this)){if(!(o=an(this,{type:"update",object:this.proxy||n,name:t,newValue:e})))return;e=o.newValue}if((e=r.prepareNewValue(e))!==kt.UNCHANGED){var i=un(this),o=i?{type:"update",object:this.proxy||n,oldValue:r.value,name:t,newValue:e}:null;0,r.setNewValue(e),i&&ln(this,o)}}},t.prototype.has=function(t){var e=this.pendingKeys||(this.pendingKeys=new Map),n=e.get(t);if(n)return n.get();var r=!!this.values.get(t);return n=new Ot(r,B,this.name+"."+E(t)+"?",!1),e.set(t,n),n.get()},t.prototype.addObservableProp=function(t,e,n){void 0===n&&(n=this.defaultEnhancer);var r=this.target;if(on(this)){var i=an(this,{object:this.proxy||r,name:t,type:"add",newValue:e});if(!i)return;e=i.newValue}var o=new Ot(e,n,this.name+"."+E(t),!1);this.values.set(t,o),e=o.value,Object.defineProperty(r,t,function(t){return On[t]||(On[t]={configurable:!0,enumerable:!0,get:function(){return this[A].read(t)},set:function(e){this[A].write(t,e)}})}(t)),this.notifyPropertyAddition(t,e)},t.prototype.addComputedProp=function(t,e,n){var r,i,o,s=this.target;n.name=n.name||this.name+"."+E(e),this.values.set(e,new Tt(n)),(t===s||(r=t,i=e,!(o=Object.getOwnPropertyDescriptor(r,i))||!1!==o.configurable&&!1!==o.writable))&&Object.defineProperty(t,e,function(t){return Pn[t]||(Pn[t]={configurable:kt.computedConfigurable,enumerable:!1,get:function(){return Tn(this).read(t)},set:function(e){Tn(this).write(t,e)}})}(e))},t.prototype.remove=function(t){if(this.values.has(t)){var e=this.target;if(on(this))if(!(s=an(this,{object:this.proxy||e,name:t,type:"remove"})))return;try{qt();var n=un(this),r=this.values.get(t),i=r&&r.get();if(r&&r.set(void 0),this.keysAtom.reportChanged(),this.values.delete(t),this.pendingKeys){var o=this.pendingKeys.get(t);o&&o.set(!1)}delete this.target[t];var s=n?{type:"remove",object:this.proxy||e,oldValue:i,name:t}:null;0,n&&ln(this,s)}finally{Wt()}}},t.prototype.illegalAccess=function(t,e){console.warn("Property '"+e+"' of '"+t+"' was accessed through the prototype chain. Use 'decorate' instead to declare the prop or access it statically through it's owner")},t.prototype.observe=function(t,e){return cn(this,t)},t.prototype.intercept=function(t){return sn(this,t)},t.prototype.notifyPropertyAddition=function(t,e){var n=un(this),r=n?{type:"add",object:this.proxy||this.target,name:t,newValue:e}:null;if(n&&ln(this,r),this.pendingKeys){var i=this.pendingKeys.get(t);i&&i.set(!0)}this.keysAtom.reportChanged()},t.prototype.getKeys=function(){var t,e;this.keysAtom.reportObserved();var n=[];try{for(var r=s(this.values),i=r.next();!i.done;i=r.next()){var o=a(i.value,2),u=o[0];o[1]instanceof Ot&&n.push(u)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}return n},t}();function An(t,e,n){if(void 0===e&&(e=""),void 0===n&&(n=L),Object.prototype.hasOwnProperty.call(t,A))return t[A];b(t)||(e=(t.constructor.name||"ObservableObject")+"@"+f()),e||(e="ObservableObject@"+f());var r=new Rn(t,new Map,E(e),n);return g(t,A,r),r}var On=Object.create(null),Pn=Object.create(null);function Tn(t){var e=t[A];return e||(V(t),t[A])}var Cn=m("ObservableObjectAdministration",Rn);function In(t){return!!y(t)&&(V(t),Cn(t[A]))}function Nn(t,e){if("object"==typeof t&&null!==t){if(bn(t))return void 0!==e&&h(!1),t[A].atom;if(En(t))return t[A];if(Sn(t)){var n=t;return void 0===e?n._keysAtom:((r=n._data.get(e)||n._hasMap.get(e))||h(!1),r)}var r;if(V(t),e&&!t[A]&&t[e],In(t))return e?((r=t[A].values.get(e))||h(!1),r):h(!1);if(P(t)||Ct(t)||Qt(t))return t}else if("function"==typeof t&&Qt(t[A]))return t[A];return h(!1)}function jn(t,e){return t||h("Expecting some object"),void 0!==e?jn(Nn(t,e)):P(t)||Ct(t)||Qt(t)||Sn(t)||En(t)?t:(V(t),t[A]?t[A]:void h(!1))}function Dn(t,e){return(void 0!==e?Nn(t,e):In(t)||Sn(t)||En(t)?jn(t):Nn(t)).name}var Mn=Object.prototype.toString;function Vn(t,e,n){return void 0===n&&(n=-1),function t(e,n,r,i,o){if(e===n)return 0!==e||1/e==1/n;if(null==e||null==n)return!1;if(e!=e)return n!=n;var s=typeof e;if("function"!==s&&"object"!==s&&"object"!=typeof n)return!1;var a=Mn.call(e);if(a!==Mn.call(n))return!1;switch(a){case"[object RegExp]":case"[object String]":return""+e==""+n;case"[object Number]":return+e!=+e?+n!=+n:0==+e?1/+e==1/n:+e==+n;case"[object Date]":case"[object Boolean]":return+e==+n;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(n);case"[object Map]":case"[object Set]":r>=0&&r++}e=kn(e),n=kn(n);var u="[object Array]"===a;if(!u){if("object"!=typeof e||"object"!=typeof n)return!1;var c=e.constructor,l=n.constructor;if(c!==l&&!("function"==typeof c&&c instanceof c&&"function"==typeof l&&l instanceof l)&&"constructor"in e&&"constructor"in n)return!1}if(0===r)return!1;r<0&&(r=-1);o=o||[];var f=(i=i||[]).length;for(;f--;)if(i[f]===e)return o[f]===n;if(i.push(e),o.push(n),u){if((f=e.length)!==n.length)return!1;for(;f--;)if(!t(e[f],n[f],r-1,i,o))return!1}else{var h=Object.keys(e),p=void 0;if(f=h.length,Object.keys(n).length!==f)return!1;for(;f--;)if(p=h[f],!Un(n,p)||!t(e[p],n[p],r-1,i,o))return!1}return i.pop(),o.pop(),!0}(t,e,n)}function kn(t){return bn(t)?t.slice():S(t)||Sn(t)||w(t)||En(t)?Array.from(t.entries()):t}function Un(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function Ln(t){return t[Symbol.iterator]=Bn,t}function Bn(){return this}if("undefined"==typeof Proxy||"undefined"==typeof Symbol)throw new Error("[mobx] MobX 5+ requires Proxy and Symbol objects. If your environment doesn't support Symbol or Proxy objects, please downgrade to MobX 4. For React Native Android, consider upgrading JSCore.");"object"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:te,extras:{getDebugName:Dn},$mobx:A})}.call(this,n(13),n(14))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){this.x_=t,this.y_=e,this.magnitude_=void 0,this.update()}return Object.defineProperty(t.prototype,"x",{get:function(){return this.x_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.y_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"squaredMagnitude",{get:function(){return this.squaredMagnitude_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"magnitude",{get:function(){return void 0===this.magnitude_&&(this.magnitude_=Math.sqrt(this.squaredMagnitude_)),this.magnitude_},enumerable:!0,configurable:!0}),t.prototype.update=function(){this.magnitude_=void 0,this.squaredMagnitude_=this.x*this.x+this.y*this.y},t.prototype.equals=function(t){return this.x==t.x&&this.y==t.y},t.prototype.normalize=function(){if(0==this.magnitude)return new t(0,0);var e=this.magnitude;return new t(this.x/e,this.y/e)},t.prototype.add=function(e){return new t(this.x+e.x,this.y+e.y)},t.prototype.sub=function(e){return new t(this.x-e.x,this.y-e.y)},t.prototype.mul=function(e){return new t(this.x*e,this.y*e)},t.prototype.mul2=function(e){return new t(this.x*e.x,this.y*e.y)},t.prototype.div2=function(e){return new t(this.x/e.x,this.y/e.y)},t}();e.Vector2=r,e.rand=function(t,e){return void 0===t&&(t=0),void 0===e&&(e=1),Math.random()*(e-t)+t},e.randInt=function(t,e){return Math.floor(Math.random()*(e-t+1))+t},e.clamp=function(t,e,n){return Math.min(n,Math.max(e,t))}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),function(t){t[t.Suspectible=0]="Suspectible",t[t.Infectious=1]="Infectious",t[t.Infectious_Unknown=2]="Infectious_Unknown",t[t.Recovered=3]="Recovered"}(e.SIRState||(e.SIRState={}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(18),i=n(1),o=function(){function t(){this.components_=[],this.transform_=this.addComponent(new r.Transform),i.Engine.add(this)}return Object.defineProperty(t.prototype,"transform",{get:function(){return this.transform_},enumerable:!0,configurable:!0}),t.prototype.update=function(){this.components_.forEach((function(t){t.update()})),this.doUpdate()},t.prototype.addComponent=function(t){return this.components_.push(t),t},t.prototype.getCompnoent=function(t){for(var e=null,n=0;n<this.components_.length;n++){var r=this.components_[n];if(r instanceof t){e=r;break}}return e},t.prototype.removeComponent=function(t){for(var e=0;e<this.components_.length;e++){if(this.components_[e]instanceof t){this.components_.splice(e,1);break}}},t.prototype.dispose=function(){},t}();e.Entity=o},function(t,e,n){"use strict";n.r(e),n.d(e,"Observable",(function(){return x})),n.d(e,"ConnectableObservable",(function(){return N})),n.d(e,"GroupedObservable",(function(){return D})),n.d(e,"observable",(function(){return m})),n.d(e,"Subject",(function(){return P})),n.d(e,"BehaviorSubject",(function(){return V})),n.d(e,"ReplaySubject",(function(){return et})),n.d(e,"AsyncSubject",(function(){return rt})),n.d(e,"asapScheduler",(function(){return ft})),n.d(e,"asyncScheduler",(function(){return ht})),n.d(e,"queueScheduler",(function(){return F})),n.d(e,"animationFrameScheduler",(function(){return dt})),n.d(e,"VirtualTimeScheduler",(function(){return vt})),n.d(e,"VirtualAction",(function(){return yt})),n.d(e,"Scheduler",(function(){return L})),n.d(e,"Subscription",(function(){return p})),n.d(e,"Subscriber",(function(){return y})),n.d(e,"Notification",(function(){return Q})),n.d(e,"NotificationKind",(function(){return H})),n.d(e,"pipe",(function(){return S})),n.d(e,"noop",(function(){return _})),n.d(e,"identity",(function(){return bt})),n.d(e,"isObservable",(function(){return gt})),n.d(e,"ArgumentOutOfRangeError",(function(){return mt})),n.d(e,"EmptyError",(function(){return _t})),n.d(e,"ObjectUnsubscribedError",(function(){return R})),n.d(e,"UnsubscriptionError",(function(){return h})),n.d(e,"TimeoutError",(function(){return St})),n.d(e,"bindCallback",(function(){return Rt})),n.d(e,"bindNodeCallback",(function(){return Pt})),n.d(e,"combineLatest",(function(){return Ft})),n.d(e,"concat",(function(){return Jt})),n.d(e,"defer",(function(){return Zt})),n.d(e,"empty",(function(){return q})),n.d(e,"forkJoin",(function(){return Qt})),n.d(e,"from",(function(){return Ht})),n.d(e,"fromEvent",(function(){return te})),n.d(e,"fromEventPattern",(function(){return ee})),n.d(e,"generate",(function(){return ne})),n.d(e,"iif",(function(){return ie})),n.d(e,"interval",(function(){return se})),n.d(e,"merge",(function(){return ue})),n.d(e,"never",(function(){return le})),n.d(e,"of",(function(){return X})),n.d(e,"onErrorResumeNext",(function(){return fe})),n.d(e,"pairs",(function(){return he})),n.d(e,"partition",(function(){return ge})),n.d(e,"race",(function(){return me})),n.d(e,"range",(function(){return we})),n.d(e,"throwError",(function(){return J})),n.d(e,"timer",(function(){return Ee})),n.d(e,"using",(function(){return Ae})),n.d(e,"zip",(function(){return Oe})),n.d(e,"scheduled",(function(){return Wt})),n.d(e,"EMPTY",(function(){return z})),n.d(e,"NEVER",(function(){return ce})),n.d(e,"config",(function(){return a}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)};function i(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}function o(t){return"function"==typeof t}var s=!1,a={Promise:void 0,set useDeprecatedSynchronousErrorHandling(t){t&&(new Error).stack;s=t},get useDeprecatedSynchronousErrorHandling(){return s}};function u(t){setTimeout((function(){throw t}),0)}var c={closed:!0,next:function(t){},error:function(t){if(a.useDeprecatedSynchronousErrorHandling)throw t;u(t)},complete:function(){}},l=function(){return Array.isArray||function(t){return t&&"number"==typeof t.length}}();function f(t){return null!==t&&"object"==typeof t}var h=function(){function t(t){return Error.call(this),this.message=t?t.length+" errors occurred during unsubscription:\n"+t.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=t,this}return t.prototype=Object.create(Error.prototype),t}(),p=function(){function t(t){this.closed=!1,this._parentOrParents=null,this._subscriptions=null,t&&(this._unsubscribe=t)}return t.prototype.unsubscribe=function(){var e;if(!this.closed){var n=this._parentOrParents,r=this._unsubscribe,i=this._subscriptions;if(this.closed=!0,this._parentOrParents=null,this._subscriptions=null,n instanceof t)n.remove(this);else if(null!==n)for(var s=0;s<n.length;++s){n[s].remove(this)}if(o(r))try{r.call(this)}catch(t){e=t instanceof h?d(t.errors):[t]}if(l(i)){s=-1;for(var a=i.length;++s<a;){var u=i[s];if(f(u))try{u.unsubscribe()}catch(t){e=e||[],t instanceof h?e=e.concat(d(t.errors)):e.push(t)}}}if(e)throw new h(e)}},t.prototype.add=function(e){var n=e;if(!e)return t.EMPTY;switch(typeof e){case"function":n=new t(e);case"object":if(n===this||n.closed||"function"!=typeof n.unsubscribe)return n;if(this.closed)return n.unsubscribe(),n;if(!(n instanceof t)){var r=n;(n=new t)._subscriptions=[r]}break;default:throw new Error("unrecognized teardown "+e+" added to Subscription.")}var i=n._parentOrParents;if(null===i)n._parentOrParents=this;else if(i instanceof t){if(i===this)return n;n._parentOrParents=[i,this]}else{if(-1!==i.indexOf(this))return n;i.push(this)}var o=this._subscriptions;return null===o?this._subscriptions=[n]:o.push(n),n},t.prototype.remove=function(t){var e=this._subscriptions;if(e){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}},t.EMPTY=function(t){return t.closed=!0,t}(new t),t}();function d(t){return t.reduce((function(t,e){return t.concat(e instanceof h?e.errors:e)}),[])}var v=function(){return"function"==typeof Symbol?Symbol("rxSubscriber"):"@@rxSubscriber_"+Math.random()}(),y=function(t){function e(n,r,i){var o=t.call(this)||this;switch(o.syncErrorValue=null,o.syncErrorThrown=!1,o.syncErrorThrowable=!1,o.isStopped=!1,arguments.length){case 0:o.destination=c;break;case 1:if(!n){o.destination=c;break}if("object"==typeof n){n instanceof e?(o.syncErrorThrowable=n.syncErrorThrowable,o.destination=n,n.add(o)):(o.syncErrorThrowable=!0,o.destination=new b(o,n));break}default:o.syncErrorThrowable=!0,o.destination=new b(o,n,r,i)}return o}return i(e,t),e.prototype[v]=function(){return this},e.create=function(t,n,r){var i=new e(t,n,r);return i.syncErrorThrowable=!1,i},e.prototype.next=function(t){this.isStopped||this._next(t)},e.prototype.error=function(t){this.isStopped||(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped||(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this))},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){this.destination.error(t),this.unsubscribe()},e.prototype._complete=function(){this.destination.complete(),this.unsubscribe()},e.prototype._unsubscribeAndRecycle=function(){var t=this._parentOrParents;return this._parentOrParents=null,this.unsubscribe(),this.closed=!1,this.isStopped=!1,this._parentOrParents=t,this},e}(p),b=function(t){function e(e,n,r,i){var s,a=t.call(this)||this;a._parentSubscriber=e;var u=a;return o(n)?s=n:n&&(s=n.next,r=n.error,i=n.complete,n!==c&&(o((u=Object.create(n)).unsubscribe)&&a.add(u.unsubscribe.bind(u)),u.unsubscribe=a.unsubscribe.bind(a))),a._context=u,a._next=s,a._error=r,a._complete=i,a}return i(e,t),e.prototype.next=function(t){if(!this.isStopped&&this._next){var e=this._parentSubscriber;a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?this.__tryOrSetError(e,this._next,t)&&this.unsubscribe():this.__tryOrUnsub(this._next,t)}},e.prototype.error=function(t){if(!this.isStopped){var e=this._parentSubscriber,n=a.useDeprecatedSynchronousErrorHandling;if(this._error)n&&e.syncErrorThrowable?(this.__tryOrSetError(e,this._error,t),this.unsubscribe()):(this.__tryOrUnsub(this._error,t),this.unsubscribe());else if(e.syncErrorThrowable)n?(e.syncErrorValue=t,e.syncErrorThrown=!0):u(t),this.unsubscribe();else{if(this.unsubscribe(),n)throw t;u(t)}}},e.prototype.complete=function(){var t=this;if(!this.isStopped){var e=this._parentSubscriber;if(this._complete){var n=function(){return t._complete.call(t._context)};a.useDeprecatedSynchronousErrorHandling&&e.syncErrorThrowable?(this.__tryOrSetError(e,n),this.unsubscribe()):(this.__tryOrUnsub(n),this.unsubscribe())}else this.unsubscribe()}},e.prototype.__tryOrUnsub=function(t,e){try{t.call(this._context,e)}catch(t){if(this.unsubscribe(),a.useDeprecatedSynchronousErrorHandling)throw t;u(t)}},e.prototype.__tryOrSetError=function(t,e,n){if(!a.useDeprecatedSynchronousErrorHandling)throw new Error("bad call");try{e.call(this._context,n)}catch(e){return a.useDeprecatedSynchronousErrorHandling?(t.syncErrorValue=e,t.syncErrorThrown=!0,!0):(u(e),!0)}return!1},e.prototype._unsubscribe=function(){var t=this._parentSubscriber;this._context=null,this._parentSubscriber=null,t.unsubscribe()},e}(y);function g(t){for(;t;){var e=t,n=e.closed,r=e.destination,i=e.isStopped;if(n||i)return!1;t=r&&r instanceof y?r:null}return!0}var m=function(){return"function"==typeof Symbol&&Symbol.observable||"@@observable"}();function _(){}function S(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return w(t)}function w(t){return t?1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}:_}var x=function(){function t(t){this._isScalar=!1,t&&(this._subscribe=t)}return t.prototype.lift=function(e){var n=new t;return n.source=this,n.operator=e,n},t.prototype.subscribe=function(t,e,n){var r=this.operator,i=function(t,e,n){if(t){if(t instanceof y)return t;if(t[v])return t[v]()}return t||e||n?new y(t,e,n):new y(c)}(t,e,n);if(r?i.add(r.call(i,this.source)):i.add(this.source||a.useDeprecatedSynchronousErrorHandling&&!i.syncErrorThrowable?this._subscribe(i):this._trySubscribe(i)),a.useDeprecatedSynchronousErrorHandling&&i.syncErrorThrowable&&(i.syncErrorThrowable=!1,i.syncErrorThrown))throw i.syncErrorValue;return i},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){a.useDeprecatedSynchronousErrorHandling&&(t.syncErrorThrown=!0,t.syncErrorValue=e),g(t)?t.error(e):console.warn(e)}},t.prototype.forEach=function(t,e){var n=this;return new(e=E(e))((function(e,r){var i;i=n.subscribe((function(e){try{t(e)}catch(t){r(t),i&&i.unsubscribe()}}),r,e)}))},t.prototype._subscribe=function(t){var e=this.source;return e&&e.subscribe(t)},t.prototype[m]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 0===t.length?this:w(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=E(t))((function(t,n){var r;e.subscribe((function(t){return r=t}),(function(t){return n(t)}),(function(){return t(r)}))}))},t.create=function(e){return new t(e)},t}();function E(t){if(t||(t=a.Promise||Promise),!t)throw new Error("no Promise impl found");return t}var R=function(){function t(){return Error.call(this),this.message="object unsubscribed",this.name="ObjectUnsubscribedError",this}return t.prototype=Object.create(Error.prototype),t}(),A=function(t){function e(e,n){var r=t.call(this)||this;return r.subject=e,r.subscriber=n,r.closed=!1,r}return i(e,t),e.prototype.unsubscribe=function(){if(!this.closed){this.closed=!0;var t=this.subject,e=t.observers;if(this.subject=null,e&&0!==e.length&&!t.isStopped&&!t.closed){var n=e.indexOf(this.subscriber);-1!==n&&e.splice(n,1)}}},e}(p),O=function(t){function e(e){var n=t.call(this,e)||this;return n.destination=e,n}return i(e,t),e}(y),P=function(t){function e(){var e=t.call(this)||this;return e.observers=[],e.closed=!1,e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return i(e,t),e.prototype[v]=function(){return new O(this)},e.prototype.lift=function(t){var e=new T(this,this);return e.operator=t,e},e.prototype.next=function(t){if(this.closed)throw new R;if(!this.isStopped)for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].next(t)},e.prototype.error=function(t){if(this.closed)throw new R;this.hasError=!0,this.thrownError=t,this.isStopped=!0;for(var e=this.observers,n=e.length,r=e.slice(),i=0;i<n;i++)r[i].error(t);this.observers.length=0},e.prototype.complete=function(){if(this.closed)throw new R;this.isStopped=!0;for(var t=this.observers,e=t.length,n=t.slice(),r=0;r<e;r++)n[r].complete();this.observers.length=0},e.prototype.unsubscribe=function(){this.isStopped=!0,this.closed=!0,this.observers=null},e.prototype._trySubscribe=function(e){if(this.closed)throw new R;return t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){if(this.closed)throw new R;return this.hasError?(t.error(this.thrownError),p.EMPTY):this.isStopped?(t.complete(),p.EMPTY):(this.observers.push(t),new A(this,t))},e.prototype.asObservable=function(){var t=new x;return t.source=this,t},e.create=function(t,e){return new T(t,e)},e}(x),T=function(t){function e(e,n){var r=t.call(this)||this;return r.destination=e,r.source=n,r}return i(e,t),e.prototype.next=function(t){var e=this.destination;e&&e.next&&e.next(t)},e.prototype.error=function(t){var e=this.destination;e&&e.error&&this.destination.error(t)},e.prototype.complete=function(){var t=this.destination;t&&t.complete&&this.destination.complete()},e.prototype._subscribe=function(t){return this.source?this.source.subscribe(t):p.EMPTY},e}(P);var C=function(){function t(t){this.connectable=t}return t.prototype.call=function(t,e){var n=this.connectable;n._refCount++;var r=new I(t,n),i=e.subscribe(r);return r.closed||(r.connection=n.connect()),i},t}(),I=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._refCount;if(e<=0)this.connection=null;else if(t._refCount=e-1,e>1)this.connection=null;else{var n=this.connection,r=t._connection;this.connection=null,!r||n&&r!==n||r.unsubscribe()}}else this.connection=null},e}(y),N=function(t){function e(e,n){var r=t.call(this)||this;return r.source=e,r.subjectFactory=n,r._refCount=0,r._isComplete=!1,r}return i(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype.connect=function(){var t=this._connection;return t||(this._isComplete=!1,(t=this._connection=new p).add(this.source.subscribe(new j(this.getSubject(),this))),t.closed&&(this._connection=null,t=p.EMPTY)),t},e.prototype.refCount=function(){return(t=this).lift(new C(t));var t},e}(x),j=function(t){function e(e,n){var r=t.call(this,e)||this;return r.connectable=n,r}return i(e,t),e.prototype._error=function(e){this._unsubscribe(),t.prototype._error.call(this,e)},e.prototype._complete=function(){this.connectable._isComplete=!0,this._unsubscribe(),t.prototype._complete.call(this)},e.prototype._unsubscribe=function(){var t=this.connectable;if(t){this.connectable=null;var e=t._connection;t._refCount=0,t._subject=null,t._connection=null,e&&e.unsubscribe()}},e}(O);var D=function(t){function e(e,n,r){var i=t.call(this)||this;return i.key=e,i.groupSubject=n,i.refCountSubscription=r,i}return i(e,t),e.prototype._subscribe=function(t){var e=new p,n=this.refCountSubscription,r=this.groupSubject;return n&&!n.closed&&e.add(new M(n)),e.add(r.subscribe(t)),e},e}(x),M=function(t){function e(e){var n=t.call(this)||this;return n.parent=e,e.count++,n}return i(e,t),e.prototype.unsubscribe=function(){var e=this.parent;e.closed||this.closed||(t.prototype.unsubscribe.call(this),e.count-=1,0===e.count&&e.attemptedToUnsubscribe&&e.unsubscribe())},e}(p),V=function(t){function e(e){var n=t.call(this)||this;return n._value=e,n}return i(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!0,configurable:!0}),e.prototype._subscribe=function(e){var n=t.prototype._subscribe.call(this,e);return n&&!n.closed&&e.next(this._value),n},e.prototype.getValue=function(){if(this.hasError)throw this.thrownError;if(this.closed)throw new R;return this._value},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(P),k=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r.pending=!1,r}return i(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var n=this.id,r=this.scheduler;return null!=n&&(this.id=this.recycleAsyncId(r,n,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(r,this.id,e),this},e.prototype.requestAsyncId=function(t,e,n){return void 0===n&&(n=0),setInterval(t.flush.bind(t,this),n)},e.prototype.recycleAsyncId=function(t,e,n){if(void 0===n&&(n=0),null!==n&&this.delay===n&&!1===this.pending)return e;clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var n=this._execute(t,e);if(n)return n;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var n=!1,r=void 0;try{this.work(t)}catch(t){n=!0,r=!!t&&t||new Error(t)}if(n)return this.unsubscribe(),r},e.prototype._unsubscribe=function(){var t=this.id,e=this.scheduler,n=e.actions,r=n.indexOf(this);this.work=null,this.state=null,this.pending=!1,this.scheduler=null,-1!==r&&n.splice(r,1),null!=t&&(this.id=this.recycleAsyncId(e,t,null)),this.delay=null},e}(function(t){function e(e,n){return t.call(this)||this}return i(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(p)),U=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.schedule=function(e,n){return void 0===n&&(n=0),n>0?t.prototype.schedule.call(this,e,n):(this.delay=n,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,n){return n>0||this.closed?t.prototype.execute.call(this,e,n):this._execute(e,n)},e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0?t.prototype.requestAsyncId.call(this,e,n,r):e.flush(this)},e}(k),L=function(){function t(e,n){void 0===n&&(n=t.now),this.SchedulerAction=e,this.now=n}return t.prototype.schedule=function(t,e,n){return void 0===e&&(e=0),new this.SchedulerAction(this,t).schedule(n,e)},t.now=function(){return Date.now()},t}(),B=function(t){function e(n,r){void 0===r&&(r=L.now);var i=t.call(this,n,(function(){return e.delegate&&e.delegate!==i?e.delegate.now():r()}))||this;return i.actions=[],i.active=!1,i.scheduled=void 0,i}return i(e,t),e.prototype.schedule=function(n,r,i){return void 0===r&&(r=0),e.delegate&&e.delegate!==this?e.delegate.schedule(n,r,i):t.prototype.schedule.call(this,n,r,i)},e.prototype.flush=function(t){var e=this.actions;if(this.active)e.push(t);else{var n;this.active=!0;do{if(n=t.execute(t.state,t.delay))break}while(t=e.shift());if(this.active=!1,n){for(;t=e.shift();)t.unsubscribe();throw n}}},e}(L),F=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e}(B))(U),z=new x((function(t){return t.complete()}));function q(t){return t?function(t){return new x((function(e){return t.schedule((function(){return e.complete()}))}))}(t):z}function W(t){return t&&"function"==typeof t.schedule}var H,Y=function(t){return function(e){for(var n=0,r=t.length;n<r&&!e.closed;n++)e.next(t[n]);e.complete()}};function G(t,e){return new x((function(n){var r=new p,i=0;return r.add(e.schedule((function(){i!==t.length?(n.next(t[i++]),n.closed||r.add(this.schedule())):n.complete()}))),r}))}function K(t,e){return e?G(t,e):new x(Y(t))}function X(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return W(n)?(t.pop(),G(t,n)):K(t)}function J(t,e){return new x(e?function(n){return e.schedule(Z,0,{error:t,subscriber:n})}:function(e){return e.error(t)})}function Z(t){var e=t.error;t.subscriber.error(e)}H||(H={});var Q=function(){function t(t,e,n){this.kind=t,this.value=e,this.error=n,this.hasValue="N"===t}return t.prototype.observe=function(t){switch(this.kind){case"N":return t.next&&t.next(this.value);case"E":return t.error&&t.error(this.error);case"C":return t.complete&&t.complete()}},t.prototype.do=function(t,e,n){switch(this.kind){case"N":return t&&t(this.value);case"E":return e&&e(this.error);case"C":return n&&n()}},t.prototype.accept=function(t,e,n){return t&&"function"==typeof t.next?this.observe(t):this.do(t,e,n)},t.prototype.toObservable=function(){switch(this.kind){case"N":return X(this.value);case"E":return J(this.error);case"C":return q()}throw new Error("unexpected notification kind value")},t.createNext=function(e){return void 0!==e?new t("N",e):t.undefinedValueNotification},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t.undefinedValueNotification=new t("N",void 0),t}();var $=function(t){function e(e,n,r){void 0===r&&(r=0);var i=t.call(this,e)||this;return i.scheduler=n,i.delay=r,i}return i(e,t),e.dispatch=function(t){var e=t.notification,n=t.destination;e.observe(n),this.unsubscribe()},e.prototype.scheduleMessage=function(t){this.destination.add(this.scheduler.schedule(e.dispatch,this.delay,new tt(t,this.destination)))},e.prototype._next=function(t){this.scheduleMessage(Q.createNext(t))},e.prototype._error=function(t){this.scheduleMessage(Q.createError(t)),this.unsubscribe()},e.prototype._complete=function(){this.scheduleMessage(Q.createComplete()),this.unsubscribe()},e}(y),tt=function(){return function(t,e){this.notification=t,this.destination=e}}(),et=function(t){function e(e,n,r){void 0===e&&(e=Number.POSITIVE_INFINITY),void 0===n&&(n=Number.POSITIVE_INFINITY);var i=t.call(this)||this;return i.scheduler=r,i._events=[],i._infiniteTimeWindow=!1,i._bufferSize=e<1?1:e,i._windowTime=n<1?1:n,n===Number.POSITIVE_INFINITY?(i._infiniteTimeWindow=!0,i.next=i.nextInfiniteTimeWindow):i.next=i.nextTimeWindow,i}return i(e,t),e.prototype.nextInfiniteTimeWindow=function(e){var n=this._events;n.push(e),n.length>this._bufferSize&&n.shift(),t.prototype.next.call(this,e)},e.prototype.nextTimeWindow=function(e){this._events.push(new nt(this._getNow(),e)),this._trimBufferThenGetEvents(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){var e,n=this._infiniteTimeWindow,r=n?this._events:this._trimBufferThenGetEvents(),i=this.scheduler,o=r.length;if(this.closed)throw new R;if(this.isStopped||this.hasError?e=p.EMPTY:(this.observers.push(t),e=new A(this,t)),i&&t.add(t=new $(t,i)),n)for(var s=0;s<o&&!t.closed;s++)t.next(r[s]);else for(s=0;s<o&&!t.closed;s++)t.next(r[s].value);return this.hasError?t.error(this.thrownError):this.isStopped&&t.complete(),e},e.prototype._getNow=function(){return(this.scheduler||F).now()},e.prototype._trimBufferThenGetEvents=function(){for(var t=this._getNow(),e=this._bufferSize,n=this._windowTime,r=this._events,i=r.length,o=0;o<i&&!(t-r[o].time<n);)o++;return i>e&&(o=Math.max(o,i-e)),o>0&&r.splice(0,o),r},e}(P),nt=function(){return function(t,e){this.time=t,this.value=e}}(),rt=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.value=null,e.hasNext=!1,e.hasCompleted=!1,e}return i(e,t),e.prototype._subscribe=function(e){return this.hasError?(e.error(this.thrownError),p.EMPTY):this.hasCompleted&&this.hasNext?(e.next(this.value),e.complete(),p.EMPTY):t.prototype._subscribe.call(this,e)},e.prototype.next=function(t){this.hasCompleted||(this.value=t,this.hasNext=!0)},e.prototype.error=function(e){this.hasCompleted||t.prototype.error.call(this,e)},e.prototype.complete=function(){this.hasCompleted=!0,this.hasNext&&t.prototype.next.call(this,this.value),t.prototype.complete.call(this)},e}(P),it=1,ot=function(){return Promise.resolve()}(),st={};function at(t){return t in st&&(delete st[t],!0)}var ut=function(t){var e=it++;return st[e]=!0,ot.then((function(){return at(e)&&t()})),e},ct=function(t){at(t)},lt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=ut(e.flush.bind(e,null))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(ct(n),e.scheduled=void 0)},e}(k),ft=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(B))(lt),ht=new B(k),pt=function(t){function e(e,n){var r=t.call(this,e,n)||this;return r.scheduler=e,r.work=n,r}return i(e,t),e.prototype.requestAsyncId=function(e,n,r){return void 0===r&&(r=0),null!==r&&r>0?t.prototype.requestAsyncId.call(this,e,n,r):(e.actions.push(this),e.scheduled||(e.scheduled=requestAnimationFrame((function(){return e.flush(null)}))))},e.prototype.recycleAsyncId=function(e,n,r){if(void 0===r&&(r=0),null!==r&&r>0||null===r&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,n,r);0===e.actions.length&&(cancelAnimationFrame(n),e.scheduled=void 0)},e}(k),dt=new(function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.flush=function(t){this.active=!0,this.scheduled=void 0;var e,n=this.actions,r=-1,i=n.length;t=t||n.shift();do{if(e=t.execute(t.state,t.delay))break}while(++r<i&&(t=n.shift()));if(this.active=!1,e){for(;++r<i&&(t=n.shift());)t.unsubscribe();throw e}},e}(B))(pt),vt=function(t){function e(e,n){void 0===e&&(e=yt),void 0===n&&(n=Number.POSITIVE_INFINITY);var r=t.call(this,e,(function(){return r.frame}))||this;return r.maxFrames=n,r.frame=0,r.index=-1,r}return i(e,t),e.prototype.flush=function(){for(var t,e,n=this.actions,r=this.maxFrames;(e=n[0])&&e.delay<=r&&(n.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=n.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(B),yt=function(t){function e(e,n,r){void 0===r&&(r=e.index+=1);var i=t.call(this,e,n)||this;return i.scheduler=e,i.work=n,i.index=r,i.active=!0,i.index=e.index=r,i}return i(e,t),e.prototype.schedule=function(n,r){if(void 0===r&&(r=0),!this.id)return t.prototype.schedule.call(this,n,r);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(n,r)},e.prototype.requestAsyncId=function(t,n,r){void 0===r&&(r=0),this.delay=t.frame+r;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,n){void 0===n&&(n=0)},e.prototype._execute=function(e,n){if(!0===this.active)return t.prototype._execute.call(this,e,n)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(k);function bt(t){return t}function gt(t){return!!t&&(t instanceof x||"function"==typeof t.lift&&"function"==typeof t.subscribe)}var mt=function(){function t(){return Error.call(this),this.message="argument out of range",this.name="ArgumentOutOfRangeError",this}return t.prototype=Object.create(Error.prototype),t}(),_t=function(){function t(){return Error.call(this),this.message="no elements in sequence",this.name="EmptyError",this}return t.prototype=Object.create(Error.prototype),t}(),St=function(){function t(){return Error.call(this),this.message="Timeout has occurred",this.name="TimeoutError",this}return t.prototype=Object.create(Error.prototype),t}();function wt(t,e){return function(n){if("function"!=typeof t)throw new TypeError("argument is not a function. Are you looking for `mapTo()`?");return n.lift(new xt(t,e))}}var xt=function(){function t(t,e){this.project=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new Et(t,this.project,this.thisArg))},t}(),Et=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.project=n,i.count=0,i.thisArg=r||i,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.project.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y);function Rt(t,e,n){if(e){if(!W(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Rt(t,n).apply(void 0,r).pipe(wt((function(t){return l(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i,o=this,s={context:o,subject:i,callbackFunc:t,scheduler:n};return new x((function(r){if(n){var a={args:e,subscriber:r,params:s};return n.schedule(At,0,a)}if(!i){i=new rt;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];i.next(t.length<=1?t[0]:t),i.complete()}]))}catch(t){g(i)?i.error(t):console.warn(t)}}return i.subscribe(r)}))}}function At(t){var e=this,n=t.args,r=t.subscriber,i=t.params,o=i.callbackFunc,s=i.context,a=i.scheduler,u=i.subject;if(!u){u=i.subject=new rt;try{o.apply(s,n.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.length<=1?t[0]:t;e.add(a.schedule(Ot,0,{value:r,subject:u}))}]))}catch(t){u.error(t)}}this.add(u.subscribe(r))}function Ot(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function Pt(t,e,n){if(e){if(!W(e))return function(){for(var r=[],i=0;i<arguments.length;i++)r[i]=arguments[i];return Pt(t,n).apply(void 0,r).pipe(wt((function(t){return l(t)?e.apply(void 0,t):e(t)})))};n=e}return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];var i={subject:void 0,args:e,callbackFunc:t,scheduler:n,context:this};return new x((function(r){var o=i.context,s=i.subject;if(n)return n.schedule(Tt,0,{params:i,subscriber:r,context:o});if(!s){s=i.subject=new rt;try{t.apply(o,e.concat([function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t.shift();n?s.error(n):(s.next(t.length<=1?t[0]:t),s.complete())}]))}catch(t){g(s)?s.error(t):console.warn(t)}}return s.subscribe(r)}))}}function Tt(t){var e=this,n=t.params,r=t.subscriber,i=t.context,o=n.callbackFunc,s=n.args,a=n.scheduler,u=n.subject;if(!u){u=n.subject=new rt;try{o.apply(i,s.concat([function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];var r=t.shift();if(r)e.add(a.schedule(It,0,{err:r,subject:u}));else{var i=t.length<=1?t[0]:t;e.add(a.schedule(Ct,0,{value:i,subject:u}))}}]))}catch(t){this.add(a.schedule(It,0,{err:t,subject:u}))}}this.add(u.subscribe(r))}function Ct(t){var e=t.value,n=t.subject;n.next(e),n.complete()}function It(t){var e=t.err;t.subject.error(e)}var Nt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return i(e,t),e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyError=function(t,e){this.destination.error(t)},e.prototype.notifyComplete=function(t){this.destination.complete()},e}(y),jt=function(t){function e(e,n,r){var i=t.call(this)||this;return i.parent=e,i.outerValue=n,i.outerIndex=r,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.parent.notifyNext(this.outerValue,t,this.outerIndex,this.index++,this)},e.prototype._error=function(t){this.parent.notifyError(t,this),this.unsubscribe()},e.prototype._complete=function(){this.parent.notifyComplete(this),this.unsubscribe()},e}(y);function Dt(){return"function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"}var Mt=Dt(),Vt=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t};function kt(t){return!!t&&"function"!=typeof t.subscribe&&"function"==typeof t.then}var Ut=function(t){if(t&&"function"==typeof t[m])return r=t,function(t){var e=r[m]();if("function"!=typeof e.subscribe)throw new TypeError("Provided object does not correctly implement Symbol.observable");return e.subscribe(t)};if(Vt(t))return Y(t);if(kt(t))return n=t,function(t){return n.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,u),t};if(t&&"function"==typeof t[Mt])return e=t,function(t){for(var n=e[Mt]();;){var r=n.next();if(r.done){t.complete();break}if(t.next(r.value),t.closed)break}return"function"==typeof n.return&&t.add((function(){n.return&&n.return()})),t};var e,n,r,i=f(t)?"an invalid object":"'"+t+"'";throw new TypeError("You provided "+i+" where a stream was expected. You can provide an Observable, Promise, Array, or Iterable.")};function Lt(t,e,n,r,i){if(void 0===i&&(i=new jt(t,n,r)),!i.closed)return e instanceof x?e.subscribe(i):Ut(e)(i)}var Bt={};function Ft(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=null,r=null;return W(t[t.length-1])&&(r=t.pop()),"function"==typeof t[t.length-1]&&(n=t.pop()),1===t.length&&l(t[0])&&(t=t[0]),K(t,r).lift(new zt(n))}var zt=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new qt(t,this.resultSelector))},t}(),qt=function(t){function e(e,n){var r=t.call(this,e)||this;return r.resultSelector=n,r.active=0,r.values=[],r.observables=[],r}return i(e,t),e.prototype._next=function(t){this.values.push(Bt),this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{this.active=e,this.toRespond=e;for(var n=0;n<e;n++){var r=t[n];this.add(Lt(this,r,r,n))}}},e.prototype.notifyComplete=function(t){0==(this.active-=1)&&this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){var o=this.values,s=o[n],a=this.toRespond?s===Bt?--this.toRespond:this.toRespond:0;o[n]=e,0===a&&(this.resultSelector?this._tryResultSelector(o):this.destination.next(o.slice()))},e.prototype._tryResultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(Nt);function Wt(t,e){if(null!=t){if(function(t){return t&&"function"==typeof t[m]}(t))return function(t,e){return new x((function(n){var r=new p;return r.add(e.schedule((function(){var i=t[m]();r.add(i.subscribe({next:function(t){r.add(e.schedule((function(){return n.next(t)})))},error:function(t){r.add(e.schedule((function(){return n.error(t)})))},complete:function(){r.add(e.schedule((function(){return n.complete()})))}}))}))),r}))}(t,e);if(kt(t))return function(t,e){return new x((function(n){var r=new p;return r.add(e.schedule((function(){return t.then((function(t){r.add(e.schedule((function(){n.next(t),r.add(e.schedule((function(){return n.complete()})))})))}),(function(t){r.add(e.schedule((function(){return n.error(t)})))}))}))),r}))}(t,e);if(Vt(t))return G(t,e);if(function(t){return t&&"function"==typeof t[Mt]}(t)||"string"==typeof t)return function(t,e){if(!t)throw new Error("Iterable cannot be null");return new x((function(n){var r,i=new p;return i.add((function(){r&&"function"==typeof r.return&&r.return()})),i.add(e.schedule((function(){r=t[Mt](),i.add(e.schedule((function(){if(!n.closed){var t,e;try{var i=r.next();t=i.value,e=i.done}catch(t){return void n.error(t)}e?n.complete():(n.next(t),this.schedule())}})))}))),i}))}(t,e)}throw new TypeError((null!==t&&typeof t||t)+" is not observable")}function Ht(t,e){return e?Wt(t,e):t instanceof x?t:new x(Ut(t))}var Yt=function(){function t(t,e){void 0===e&&(e=Number.POSITIVE_INFINITY),this.project=t,this.concurrent=e}return t.prototype.call=function(t,e){return e.subscribe(new Gt(t,this.project,this.concurrent))},t}(),Gt=function(t){function e(e,n,r){void 0===r&&(r=Number.POSITIVE_INFINITY);var i=t.call(this,e)||this;return i.project=n,i.concurrent=r,i.hasCompleted=!1,i.buffer=[],i.active=0,i.index=0,i}return i(e,t),e.prototype._next=function(t){this.active<this.concurrent?this._tryNext(t):this.buffer.push(t)},e.prototype._tryNext=function(t){var e,n=this.index++;try{e=this.project(t,n)}catch(t){return void this.destination.error(t)}this.active++,this._innerSub(e,t,n)},e.prototype._innerSub=function(t,e,n){var r=new jt(this,e,n),i=this.destination;i.add(r);var o=Lt(this,t,void 0,void 0,r);o!==r&&i.add(o)},e.prototype._complete=function(){this.hasCompleted=!0,0===this.active&&0===this.buffer.length&&this.destination.complete(),this.unsubscribe()},e.prototype.notifyNext=function(t,e,n,r,i){this.destination.next(e)},e.prototype.notifyComplete=function(t){var e=this.buffer;this.remove(t),this.active--,e.length>0?this._next(e.shift()):0===this.active&&this.hasCompleted&&this.destination.complete()},e}(Nt);function Kt(t){return void 0===t&&(t=Number.POSITIVE_INFINITY),function t(e,n,r){return void 0===r&&(r=Number.POSITIVE_INFINITY),"function"==typeof n?function(i){return i.pipe(t((function(t,r){return Ht(e(t,r)).pipe(wt((function(e,i){return n(t,e,r,i)})))}),r))}:("number"==typeof n&&(r=n),function(t){return t.lift(new Yt(e,r))})}(bt,t)}function Xt(){return Kt(1)}function Jt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Xt()(X.apply(void 0,t))}function Zt(t){return new x((function(e){var n;try{n=t()}catch(t){return void e.error(t)}return(n?Ht(n):q()).subscribe(e)}))}function Qt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){var n=t[0];if(l(n))return $t(n,null);if(f(n)&&Object.getPrototypeOf(n)===Object.prototype){var r=Object.keys(n);return $t(r.map((function(t){return n[t]})),r)}}if("function"==typeof t[t.length-1]){var i=t.pop();return $t(t=1===t.length&&l(t[0])?t[0]:t,null).pipe(wt((function(t){return i.apply(void 0,t)})))}return $t(t,null)}function $t(t,e){return new x((function(n){var r=t.length;if(0!==r)for(var i=new Array(r),o=0,s=0,a=function(a){var u=Ht(t[a]),c=!1;n.add(u.subscribe({next:function(t){c||(c=!0,s++),i[a]=t},error:function(t){return n.error(t)},complete:function(){++o!==r&&c||(s===r&&n.next(e?e.reduce((function(t,e,n){return t[e]=i[n],t}),{}):i),n.complete())}}))},u=0;u<r;u++)a(u);else n.complete()}))}function te(t,e,n,r){return o(n)&&(r=n,n=void 0),r?te(t,e,n).pipe(wt((function(t){return l(t)?r.apply(void 0,t):r(t)}))):new x((function(r){!function t(e,n,r,i,o){var s;if(function(t){return t&&"function"==typeof t.addEventListener&&"function"==typeof t.removeEventListener}(e)){var a=e;e.addEventListener(n,r,o),s=function(){return a.removeEventListener(n,r,o)}}else if(function(t){return t&&"function"==typeof t.on&&"function"==typeof t.off}(e)){var u=e;e.on(n,r),s=function(){return u.off(n,r)}}else if(function(t){return t&&"function"==typeof t.addListener&&"function"==typeof t.removeListener}(e)){var c=e;e.addListener(n,r),s=function(){return c.removeListener(n,r)}}else{if(!e||!e.length)throw new TypeError("Invalid event target");for(var l=0,f=e.length;l<f;l++)t(e[l],n,r,i,o)}i.add(s)}(t,e,(function(t){arguments.length>1?r.next(Array.prototype.slice.call(arguments)):r.next(t)}),r,n)}))}function ee(t,e,n){return n?ee(t,e).pipe(wt((function(t){return l(t)?n.apply(void 0,t):n(t)}))):new x((function(n){var r,i=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return n.next(1===t.length?t[0]:t)};try{r=t(i)}catch(t){return void n.error(t)}if(o(e))return function(){return e(i,r)}}))}function ne(t,e,n,r,i){var o,s;if(1==arguments.length){var a=t;s=a.initialState,e=a.condition,n=a.iterate,o=a.resultSelector||bt,i=a.scheduler}else void 0===r||W(r)?(s=t,o=bt,i=r):(s=t,o=r);return new x((function(t){var r=s;if(i)return i.schedule(re,0,{subscriber:t,iterate:n,condition:e,resultSelector:o,state:r});for(;;){if(e){var a=void 0;try{a=e(r)}catch(e){return void t.error(e)}if(!a){t.complete();break}}var u=void 0;try{u=o(r)}catch(e){return void t.error(e)}if(t.next(u),t.closed)break;try{r=n(r)}catch(e){return void t.error(e)}}}))}function re(t){var e=t.subscriber,n=t.condition;if(!e.closed){if(t.needIterate)try{t.state=t.iterate(t.state)}catch(t){return void e.error(t)}else t.needIterate=!0;if(n){var r=void 0;try{r=n(t.state)}catch(t){return void e.error(t)}if(!r)return void e.complete();if(e.closed)return}var i;try{i=t.resultSelector(t.state)}catch(t){return void e.error(t)}if(!e.closed&&(e.next(i),!e.closed))return this.schedule(t)}}function ie(t,e,n){return void 0===e&&(e=z),void 0===n&&(n=z),Zt((function(){return t()?e:n}))}function oe(t){return!l(t)&&t-parseFloat(t)+1>=0}function se(t,e){return void 0===t&&(t=0),void 0===e&&(e=ht),(!oe(t)||t<0)&&(t=0),e&&"function"==typeof e.schedule||(e=ht),new x((function(n){return n.add(e.schedule(ae,t,{subscriber:n,counter:0,period:t})),n}))}function ae(t){var e=t.subscriber,n=t.counter,r=t.period;e.next(n),this.schedule({subscriber:e,counter:n+1,period:r},r)}function ue(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=Number.POSITIVE_INFINITY,r=null,i=t[t.length-1];return W(i)?(r=t.pop(),t.length>1&&"number"==typeof t[t.length-1]&&(n=t.pop())):"number"==typeof i&&(n=t.pop()),null===r&&1===t.length&&t[0]instanceof x?t[0]:Kt(n)(K(t,r))}var ce=new x(_);function le(){return ce}function fe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(0===t.length)return z;var n=t[0],r=t.slice(1);return 1===t.length&&l(n)?fe.apply(void 0,n):new x((function(t){var e=function(){return t.add(fe.apply(void 0,r).subscribe(t))};return Ht(n).subscribe({next:function(e){t.next(e)},error:e,complete:e})}))}function he(t,e){return new x(e?function(n){var r=Object.keys(t),i=new p;return i.add(e.schedule(pe,0,{keys:r,index:0,subscriber:n,subscription:i,obj:t})),i}:function(e){for(var n=Object.keys(t),r=0;r<n.length&&!e.closed;r++){var i=n[r];t.hasOwnProperty(i)&&e.next([i,t[i]])}e.complete()})}function pe(t){var e=t.keys,n=t.index,r=t.subscriber,i=t.subscription,o=t.obj;if(!r.closed)if(n<e.length){var s=e[n];r.next([s,o[s]]),i.add(this.schedule({keys:e,index:n+1,subscriber:r,subscription:i,obj:o}))}else r.complete()}function de(t,e){function n(){return!n.pred.apply(n.thisArg,arguments)}return n.pred=t,n.thisArg=e,n}function ve(t,e){return function(n){return n.lift(new ye(t,e))}}var ye=function(){function t(t,e){this.predicate=t,this.thisArg=e}return t.prototype.call=function(t,e){return e.subscribe(new be(t,this.predicate,this.thisArg))},t}(),be=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.predicate=n,i.thisArg=r,i.count=0,i}return i(e,t),e.prototype._next=function(t){var e;try{e=this.predicate.call(this.thisArg,t,this.count++)}catch(t){return void this.destination.error(t)}e&&this.destination.next(t)},e}(y);function ge(t,e,n){return[ve(e,n)(new x(Ut(t))),ve(de(e,n))(new x(Ut(t)))]}function me(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];if(1===t.length){if(!l(t[0]))return t[0];t=t[0]}return K(t,void 0).lift(new _e)}var _e=function(){function t(){}return t.prototype.call=function(t,e){return e.subscribe(new Se(t))},t}(),Se=function(t){function e(e){var n=t.call(this,e)||this;return n.hasFirst=!1,n.observables=[],n.subscriptions=[],n}return i(e,t),e.prototype._next=function(t){this.observables.push(t)},e.prototype._complete=function(){var t=this.observables,e=t.length;if(0===e)this.destination.complete();else{for(var n=0;n<e&&!this.hasFirst;n++){var r=t[n],i=Lt(this,r,r,n);this.subscriptions&&this.subscriptions.push(i),this.add(i)}this.observables=null}},e.prototype.notifyNext=function(t,e,n,r,i){if(!this.hasFirst){this.hasFirst=!0;for(var o=0;o<this.subscriptions.length;o++)if(o!==n){var s=this.subscriptions[o];s.unsubscribe(),this.remove(s)}this.subscriptions=null}this.destination.next(e)},e}(Nt);function we(t,e,n){return void 0===t&&(t=0),new x((function(r){void 0===e&&(e=t,t=0);var i=0,o=t;if(n)return n.schedule(xe,0,{index:i,count:e,start:t,subscriber:r});for(;;){if(i++>=e){r.complete();break}if(r.next(o++),r.closed)break}}))}function xe(t){var e=t.start,n=t.index,r=t.count,i=t.subscriber;n>=r?i.complete():(i.next(e),i.closed||(t.index=n+1,t.start=e+1,this.schedule(t)))}function Ee(t,e,n){void 0===t&&(t=0);var r=-1;return oe(e)?r=Number(e)<1?1:Number(e):W(e)&&(n=e),W(n)||(n=ht),new x((function(e){var i=oe(t)?t:+t-n.now();return n.schedule(Re,i,{index:0,period:r,subscriber:e})}))}function Re(t){var e=t.index,n=t.period,r=t.subscriber;if(r.next(e),!r.closed){if(-1===n)return r.complete();t.index=e+1,this.schedule(t,n)}}function Ae(t,e){return new x((function(n){var r,i;try{r=t()}catch(t){return void n.error(t)}try{i=e(r)}catch(t){return void n.error(t)}var o=(i?Ht(i):z).subscribe(n);return function(){o.unsubscribe(),r&&r.unsubscribe()}}))}function Oe(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var n=t[t.length-1];return"function"==typeof n&&t.pop(),K(t,void 0).lift(new Pe(n))}var Pe=function(){function t(t){this.resultSelector=t}return t.prototype.call=function(t,e){return e.subscribe(new Te(t,this.resultSelector))},t}(),Te=function(t){function e(e,n,r){void 0===r&&(r=Object.create(null));var i=t.call(this,e)||this;return i.iterators=[],i.active=0,i.resultSelector="function"==typeof n?n:null,i.values=r,i}return i(e,t),e.prototype._next=function(t){var e=this.iterators;l(t)?e.push(new Ie(t)):"function"==typeof t[Mt]?e.push(new Ce(t[Mt]())):e.push(new Ne(this.destination,this,t))},e.prototype._complete=function(){var t=this.iterators,e=t.length;if(this.unsubscribe(),0!==e){this.active=e;for(var n=0;n<e;n++){var r=t[n];if(r.stillUnsubscribed)this.destination.add(r.subscribe(r,n));else this.active--}}else this.destination.complete()},e.prototype.notifyInactive=function(){this.active--,0===this.active&&this.destination.complete()},e.prototype.checkIterators=function(){for(var t=this.iterators,e=t.length,n=this.destination,r=0;r<e;r++){if("function"==typeof(s=t[r]).hasValue&&!s.hasValue())return}var i=!1,o=[];for(r=0;r<e;r++){var s,a=(s=t[r]).next();if(s.hasCompleted()&&(i=!0),a.done)return void n.complete();o.push(a.value)}this.resultSelector?this._tryresultSelector(o):n.next(o),i&&n.complete()},e.prototype._tryresultSelector=function(t){var e;try{e=this.resultSelector.apply(this,t)}catch(t){return void this.destination.error(t)}this.destination.next(e)},e}(y),Ce=function(){function t(t){this.iterator=t,this.nextResult=t.next()}return t.prototype.hasValue=function(){return!0},t.prototype.next=function(){var t=this.nextResult;return this.nextResult=this.iterator.next(),t},t.prototype.hasCompleted=function(){var t=this.nextResult;return t&&t.done},t}(),Ie=function(){function t(t){this.array=t,this.index=0,this.length=0,this.length=t.length}return t.prototype[Mt]=function(){return this},t.prototype.next=function(t){var e=this.index++,n=this.array;return e<this.length?{value:n[e],done:!1}:{value:null,done:!0}},t.prototype.hasValue=function(){return this.array.length>this.index},t.prototype.hasCompleted=function(){return this.array.length===this.index},t}(),Ne=function(t){function e(e,n,r){var i=t.call(this,e)||this;return i.parent=n,i.observable=r,i.stillUnsubscribed=!0,i.buffer=[],i.isComplete=!1,i}return i(e,t),e.prototype[Mt]=function(){return this},e.prototype.next=function(){var t=this.buffer;return 0===t.length&&this.isComplete?{value:null,done:!0}:{value:t.shift(),done:!1}},e.prototype.hasValue=function(){return this.buffer.length>0},e.prototype.hasCompleted=function(){return 0===this.buffer.length&&this.isComplete},e.prototype.notifyComplete=function(){this.buffer.length>0?(this.isComplete=!0,this.parent.notifyInactive()):this.destination.complete()},e.prototype.notifyNext=function(t,e,n,r,i){this.buffer.push(e),this.parent.checkIterators()},e.prototype.subscribe=function(t,e){return Lt(this,this.observable,this,e)},e}(Nt)},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var o,s,a=n(15),u=n(20),c=n(1),l=n(23),f=n(0),h=document.getElementById("cvs-box"),p=document.getElementById("canvas"),d=new a.Renderer(h,p,p.width,p.height),v=!1;e.init=function(){return r(this,void 0,void 0,(function(){function t(e){c.Engine.update(e),o&&d.draw(o),s&&s.render(),requestAnimationFrame(t)}return i(this,(function(e){switch(e.label){case 0:return[4,d.initialize()];case 1:return e.sent(),requestAnimationFrame(t),v=!0,[2]}}))}))},e.createWorld=function(){if(v){c.Engine.clear();var t=f.SIRModel.societyColumnLength,e=f.SIRModel.societyRowLength,n=f.SIRModel.societySize,r=f.SIRModel.societyPopulation;o=new u.World,s=new l.StatisticView(document.getElementById("stat-box"),document.getElementById("statistic"),o.statistic);var i=t*(n+40)+40+n/2,a=e*(n+40)-40+40;d.setSize(i,a),o.createQuarantine(i-20-n/2,a-20-n/2,n/2,n/2);for(var h=0;h<e;h++)for(var p=0;p<t;p++)for(var y=o.createSociety(20+p*(n+40),20+h*(n+40),n,n),b=0;b<r;b++)y.populate()}}},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o,s=n(5),a=n(6),u=n(3),c=n(19),l=n(1),f=n(4),h=n(0),p=n(2);!function(t){t[t.Chilling=0]="Chilling",t[t.Transfering=1]="Transfering",t[t.Shopping=2]="Shopping",t[t.Traveling=3]="Traveling"}(o=e.PersonState||(e.PersonState={}));var d=function(t){this.person=t};e.PersonEvent=d;var v=function(t){function e(e,n){var r=t.call(this,e)||this;return r.person=e,r.lastState=n,r}return i(e,t),e}(d);e.PersonSIRStateChangeEvent=v;var y=function(t){function e(e,n){var r=t.call(this)||this;return r.world=e,r.society_=n,r.onDidChangeSIRState=new a.Subject,r.state_=f.SIRState.Suspectible,r.elapsed_=u.randInt(0,5e3),r.day_=0,r.dayChanged_=!1,r.infectionIntervalStep_=0,r.infectionInterval_=1e3,r.hasRipple_=!1,r.traveling_=!1,r.socialDistanceParticipant_=!1,r.speed_=30,r.society_.addPerson(r),r.stateMachine_=r.addComponent(new c.StateMachine),r.state_=f.SIRState.Suspectible,r.beginChilling=r.beginChilling.bind(r),r.updateChilling=r.updateChilling.bind(r),r.stateMachine_.setStateCallback(o.Chilling,r.beginChilling,null,r.updateChilling),r.beginTransfer=r.beginTransfer.bind(r),r.updateTransfer=r.updateTransfer.bind(r),r.stateMachine_.setStateCallback(o.Transfering,r.beginTransfer,null,r.updateTransfer),r.beginShopping=r.beginShopping.bind(r),r.updateShopping=r.updateShopping.bind(r),r.stateMachine_.setStateCallback(o.Shopping,r.beginShopping,null,r.updateShopping),r.beginTraveling=r.beginTraveling.bind(r),r.endTraveling=r.endTraveling.bind(r),r.stateMachine_.setStateCallback(o.Traveling,r.beginTraveling,r.endTraveling,null),u.rand()<h.SIRModel.initialInfectionPossiblity&&r.setState(f.SIRState.Infectious_Unknown),r.listen(),r.stateMachine_.state=o.Chilling,r}return i(e,t),Object.defineProperty(e.prototype,"state",{get:function(){return this.state_},enumerable:!0,configurable:!0}),e.prototype.setState=function(t){if(this.state_!==t){this.state_!=f.SIRState.Suspectible||t!=f.SIRState.Infectious&&t!=f.SIRState.Infectious_Unknown||(this.infectedTime_=l.Engine.elasped);var e=this.state_;this.state_=t,this.onDidChangeSIRState.next(new v(this,e))}},Object.defineProperty(e.prototype,"rippleState",{get:function(){return this.rippleState_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"hasRipple",{get:function(){return this.hasRipple_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"rippleStartedTime",{get:function(){return this.rippleStartedTime_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"infected",{get:function(){return this.state==f.SIRState.Infectious_Unknown||this.state==f.SIRState.Infectious},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"infectedTime",{get:function(){return this.infectedTime_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"speed",{get:function(){return this.speed_},enumerable:!0,configurable:!0}),e.prototype.setZone=function(t){},e.prototype.doUpdate=function(){this.dayChanged_=!1,this.elapsed_+=l.Engine.delta;var t=Math.floor(this.elapsed_/5e3),n=Math.floor(this.elapsed_/this.infectionInterval_);this.infectionIntervalStep_!=n&&(this.infectionIntervalStep_=n,this.infect(),this.discover()),this.day_!=t&&(this.dayChanged_=!0,this.day_=t),this.infected&&!this.hasRipple_?(this.hasRipple_=!0,this.rippleStartedTime_=l.Engine.elasped+u.rand(0,1e3)):!this.infected&&this.hasRipple_&&(this.rippleEndedTime_||(this.rippleEndedTime_=this.rippleStartedTime_+Math.ceil((l.Engine.elasped-this.rippleStartedTime_)/e.RIPPLE_DURATION)*e.RIPPLE_DURATION),this.rippleEndedTime_<=l.Engine.elasped&&(this.hasRipple_=!1))},e.prototype.infect=function(){var t=this;this.society_!=this.world.quarantine&&(this.state!=f.SIRState.Infectious&&this.state!=f.SIRState.Infectious_Unknown||this.society_.iterateNearby(this.society_.mapPositionWorldToSociety(this.transform.position),(function(e){e!=t&&(e.state==f.SIRState.Suspectible&&(Math.random()>h.SIRModel.infectionRate||t.transform.position.sub(e.transform.position).squaredMagnitude<h.SIRModel.infectionRadius*h.SIRModel.infectionRadius&&e.setState(f.SIRState.Infectious_Unknown)))})))},e.prototype.discover=function(){this.state==f.SIRState.Infectious_Unknown&&u.rand()<h.SIRModel.infectionDiscoveryRate&&this.setState(f.SIRState.Infectious),this.infected&&u.rand()<h.SIRModel.infectionRecoveryRate&&this.setState(f.SIRState.Recovered)},e.prototype.beginChilling=function(){this.chillingDuration_=-1,this.chillingDirection_=new u.Vector2(2*u.rand()-1,2*u.rand()-1).normalize()},e.prototype.updateChilling=function(){this.chillingDuration_-=l.Engine.delta,this.chillingDuration_<0&&(this.chillingDuration_=u.rand(500,2e3),this.chillingDirection_=new u.Vector2(2*u.rand()-1,2*u.rand()-1).normalize());var t=this.getSocialDistance();this.chillingDirection_=t||this.chillingDirection_;var e=this.chillingDirection_.mul(this.speed_/1e3*l.Engine.delta*(t?3:1));this.transform.position=this.transform.position.add(e),this.fixCoordinateByPolicy()&&(this.chillingDuration_=-1),this.society_==this.world.quarantine?h.SIRModel.quarantined?h.SIRModel.dequarantineAfterRecovered&&!this.infected&&this.startDequarantine():this.startDequarantine():h.SIRModel.quarantined&&this.state==f.SIRState.Infectious?this.startQuarantine():this.dayChanged_&&(u.rand()<h.SIRModel.shoppingRate?this.startShopping():u.rand()<h.SIRModel.travelingRate&&this.startTraveling())},e.prototype.getSocialDistance=function(){var t=this;if(this.society_==this.world.quarantine)return null;if(!this.socialDistanceParticipant_)return null;var e=1/0,n=new u.Vector2(2*u.rand()-1,2*u.rand()-1).normalize();if(this.society_.iterateNearby(this.society_.mapPositionWorldToSociety(this.transform.position),(function(r){if(r!=t&&!r.traveling_){var i=t.transform.position.sub(r.transform.position);i.squaredMagnitude<e&&(e=i.squaredMagnitude,n=i)}})),e==1/0||e>h.SIRModel.socialDistance*h.SIRModel.socialDistance)return null;if(0==n.squaredMagnitude)return new u.Vector2(2*u.rand()-1,2*u.rand()-1).normalize();var r=n.normalize();return 1==r.x||1==r.y?new u.Vector2(2*u.rand()-1,2*u.rand()-1).normalize():r},e.prototype.startQuarantine=function(){this.quarantinedSociety_=this.society_,this.quarantinedNormalizedSrcRelativeToSociety_=this.getSocietyPosition().div2(this.society_.size),this.startTraveling(this.world.quarantine)},e.prototype.startDequarantine=function(){this.startTraveling(this.quarantinedSociety_,this.quarantinedNormalizedSrcRelativeToSociety_),this.quarantinedSociety_=null},e.prototype.startTransfer=function(t,e,n,r,i){var s=t.div2(n.size),a=e.div2(r.size);this.transferNormalizedSrcRelativeToSoceity_=s,this.transferNormalizedDstRelativeToSoceity_=a,this.transferSrcSoceity_=n,this.transferDstSociety_=r,this.transferNextState_=i,this.stateMachine_.state=o.Transfering},e.prototype.beginTransfer=function(){this.transferStartedTime_=this.elapsed_,this.transferDuration_=2500},e.prototype.updateTransfer=function(){var t=this.elapsed_-this.transferStartedTime_,e=this.ease(u.clamp(t/this.transferDuration_,0,1)),n=this.transferSrcSoceity_.positionRelativeToWorld(this.transferNormalizedSrcRelativeToSoceity_.mul2(this.transferSrcSoceity_.size)),r=this.transferDstSociety_.positionRelativeToWorld(this.transferNormalizedDstRelativeToSoceity_.mul2(this.transferDstSociety_.size)),i=n.add(r.sub(n).mul(e));this.transform.position=i,1==e&&(this.stateMachine_.state=this.transferNextState_)},e.prototype.ease=function(t){return--t*t*t+1},e.prototype.startShopping=function(){this.shoppingNormalizedSrcRelativeToSociety_=this.getSocietyPosition().div2(this.society_.size);var t=this.society_.width*u.rand(-.15,.15),e=this.society_.height*u.rand(-.15,.15);this.startTransfer(this.getSocietyPosition(),new u.Vector2(this.society_.width/2+t,this.society_.height/2+e),this.society_,this.society_,o.Shopping)},e.prototype.beginShopping=function(){this.shoppingDuration_=u.rand(500,1e3)},e.prototype.updateShopping=function(){this.shoppingDuration_-=l.Engine.delta,this.shoppingDuration_<=0&&this.startTransfer(this.getSocietyPosition(),this.shoppingNormalizedSrcRelativeToSociety_.mul2(this.society_.size),this.society_,this.society_,o.Chilling)},e.prototype.startTraveling=function(t,e){if(this.traveling_=!0,this.travelingDstSociety_=t,!this.travelingDstSociety_)for(var n=0;n<10&&(this.travelingDstSociety_=this.world.societies[u.randInt(0,this.world.societies.length-1)],this.travelingDstSociety_==this.society_);n++);if(this.travelingDstSociety_!=this.society_){var r=null;if(e)r=e.mul2(t.size);else{var i=this.travelingDstSociety_.width*u.rand(-.3,.3),s=this.travelingDstSociety_.height*u.rand(-.3,.3);r=new u.Vector2(this.travelingDstSociety_.width/2+i,this.travelingDstSociety_.height/2+s)}this.startTransfer(this.getSocietyPosition(),r,this.society_,this.travelingDstSociety_,o.Traveling)}},e.prototype.beginTraveling=function(){this.society_.removePerson(this),this.society_=this.travelingDstSociety_,this.society_.addPerson(this),this.stateMachine_.state=o.Chilling},e.prototype.endTraveling=function(){this.traveling_=!1},e.prototype.fixCoordinateByPolicy=function(){var t=this.society_;if(this.society_){var e=this.getSocietyPosition();if(e.x<0||e.x>=t.width||e.y<0||e.y>=t.height)return this.transform.position=new u.Vector2(t.transform.position.x+u.clamp(e.x,0,t.width),t.transform.position.y+u.clamp(e.y,0,t.height)),!0}return!1},e.prototype.getSocietyPosition=function(){return this.society_.mapPositionWorldToSociety(this.transform.position)},e.prototype.listen=function(){var t=this;this.disposer_=p.autorun((function(){t.socialDistanceParticipant_=u.rand()<h.SIRModel.socialDistanceParticipantRatio}))},e.prototype.dispose=function(){this.disposer_()},e.RIPPLE_DURATION=1e3,e}(s.Entity);e.Person=y},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){};e.Component=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),n(11);var r=n(7);r.init().then((function(){r.createWorld()}))},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(12),i=n(0),o=n(2),s=n(1),a=n(7),u=function(){function t(t,e,n,i,o,s,a,u,c){var l=this;this.displayFunc=a,this.sidEffect=u,this.sideEffectOnChange=c,this.el_=document.createElement("div"),this.el_.className="slider-box";var f=document.createElement("div");f.className="label",f.innerText=e,this.el_.append(f);var h=document.createElement("div");this.el_.append(h),this.valueEl_=document.createElement("div"),this.valueEl_.className="value",this.el_.append(this.valueEl_),this.slider_=r.create(h,{start:n,range:{min:i,max:o},step:s}),this.slider_.on("update",(function(){l.renderValue(),l.sidEffect(+l.slider_.get())})),this.slider_.on("change",(function(){l.sideEffectOnChange&&l.sideEffectOnChange(+l.slider_.get())})),t.append(this.el_),this.renderValue()}return t.prototype.renderValue=function(){this.valueEl_.innerText=this.displayFunc(+this.slider_.get())},t}(),c=function(t,e){void 0===e&&(e=!1);var n=document.createElement("div");n.className="divider",e&&(n.className+=" bold"),t.append(n)},l=document.getElementById("control"),f=i.SIRModel;function h(){var t=document.createElement("div");return t.className="category",l.append(t),t}var p=h();new u(p,"Society Column Length (Regenerate)",i.SIRModel.societyColumnLength,1,5,1,(function(t){return t+""}),(function(t){return f.societyColumnLength=t}),(function(){return a.createWorld()})),new c(p),new u(p,"Society Row Length (Regenerate)",i.SIRModel.societyRowLength,1,5,1,(function(t){return t+""}),(function(t){return f.societyRowLength=t}),(function(){return a.createWorld()})),new c(p),new u(p,"Society Size (Regenerate)",i.SIRModel.societySize,50,3e3,1,(function(t){return t+""}),(function(t){return f.societySize=t}),(function(){return a.createWorld()})),new c(p),new u(p,"Population Per Society (Regenerate)",i.SIRModel.societyPopulation,1,5e3,1,(function(t){return t+""}),(function(t){return f.societyPopulation=t}),(function(){return a.createWorld()})),new c(p),new u(p,"Initial Infection Rate (Regenerate)",Math.round(1e3*i.SIRModel.initialInfectionPossiblity),0,1e3,1,(function(t){return t/10+"%"}),(function(t){return f.initialInfectionPossiblity=t/1e3}),(function(){return a.createWorld()})),new c(p,!0),new u(p=h(),"Infection Rate",Math.round(100*i.SIRModel.infectionRate),0,100,1,(function(t){return t+"%"}),(function(t){return f.infectionRate=t/100})),new c(p),new u(p,"Infection Discovery Rate",Math.round(100*i.SIRModel.infectionDiscoveryRate),0,100,1,(function(t){return t+"%"}),(function(t){return f.infectionDiscoveryRate=t/100})),new c(p),new u(p,"Infection Recovery Rate",Math.round(100*i.SIRModel.infectionRecoveryRate),0,100,1,(function(t){return t+"%"}),(function(t){return f.infectionRecoveryRate=t/100})),new c(p),new u(p,"Infection Radius",i.SIRModel.infectionRadius,0,60,1,(function(t){return t+""}),(function(t){return f.infectionRadius=t})),new c(p),new c(p,!0),new u(p=h(),"Shopping Rate",Math.round(100*i.SIRModel.shoppingRate),0,100,1,(function(t){return t+"%"}),(function(t){return f.shoppingRate=t/100})),new c(p),new u(p,"Travel Rate",Math.round(100*i.SIRModel.travelingRate),0,100,1,(function(t){return t+"%"}),(function(t){return f.travelingRate=t/100})),new c(p),new u(p,"Social Distance",i.SIRModel.socialDistance,0,160,1,(function(t){return t+""}),(function(t){return f.socialDistance=t})),new c(p),new u(p,"Social Distance Participant Ratio",Math.round(100*i.SIRModel.socialDistanceParticipantRatio),0,100,1,(function(t){return t+"%"}),(function(t){return f.socialDistanceParticipantRatio=t/100})),new c(p,!0),new u(p=h(),"Enable Quarantine Zone",+i.SIRModel.quarantined,0,1,1,(function(t){return t?"Enabled":"Disabled"}),(function(t){return f.quarantined=!!t})),new c(p),new u(p,"Returing Society on Recovered",+i.SIRModel.dequarantineAfterRecovered,0,1,1,(function(t){return t?"Enabled":"Disabled"}),(function(t){return f.dequarantineAfterRecovered=!!t})),new c(p);var d=document.getElementById("paused");d.addEventListener("click",(function(t){s.Engine.paused=!s.Engine.paused})),o.autorun((function(){s.Engine.paused?d.innerText="PLAY":d.innerText="PAUSE",d.className=s.Engine.paused?"active":""})),document.getElementById("clear").addEventListener("click",(function(t){confirm("Clear settings?")&&(localStorage.removeItem("SIRModel"),location.reload())}))},function(t,e,n){var r,i,o;/*! nouislider - 14.2.0 - 3/27/2020 */i=[],void 0===(o="function"==typeof(r=function(){"use strict";var t="14.2.0";function e(t){t.parentElement.removeChild(t)}function n(t){return null!=t}function r(t){t.preventDefault()}function i(t){return"number"==typeof t&&!isNaN(t)&&isFinite(t)}function o(t,e,n){n>0&&(c(t,e),setTimeout((function(){l(t,e)}),n))}function s(t){return Math.max(Math.min(t,100),0)}function a(t){return Array.isArray(t)?t:[t]}function u(t){var e=(t=String(t)).split(".");return e.length>1?e[1].length:0}function c(t,e){t.classList&&!/\s/.test(e)?t.classList.add(e):t.className+=" "+e}function l(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(new RegExp("(^|\\b)"+e.split(" ").join("|")+"(\\b|$)","gi")," ")}function f(t){var e=void 0!==window.pageXOffset,n="CSS1Compat"===(t.compatMode||"");return{x:e?window.pageXOffset:n?t.documentElement.scrollLeft:t.body.scrollLeft,y:e?window.pageYOffset:n?t.documentElement.scrollTop:t.body.scrollTop}}function h(t,e){return 100/(e-t)}function p(t,e){return 100*e/(t[1]-t[0])}function d(t,e){for(var n=1;t>=e[n];)n+=1;return n}function v(t,e,n){if(n>=t.slice(-1)[0])return 100;var r=d(n,t),i=t[r-1],o=t[r],s=e[r-1],a=e[r];return s+function(t,e){return p(t,t[0]<0?e+Math.abs(t[0]):e-t[0])}([i,o],n)/h(s,a)}function y(t,e,n,r){if(100===r)return r;var i=d(r,t),o=t[i-1],s=t[i];return n?r-o>(s-o)/2?s:o:e[i-1]?t[i-1]+function(t,e){return Math.round(t/e)*e}(r-t[i-1],e[i-1]):r}function b(t,e,n){var r;if("number"==typeof e&&(e=[e]),!Array.isArray(e))throw new Error("noUiSlider (14.2.0): 'range' contains invalid value.");if(!i(r="min"===t?0:"max"===t?100:parseFloat(t))||!i(e[0]))throw new Error("noUiSlider (14.2.0): 'range' value isn't numeric.");n.xPct.push(r),n.xVal.push(e[0]),r?n.xSteps.push(!isNaN(e[1])&&e[1]):isNaN(e[1])||(n.xSteps[0]=e[1]),n.xHighestCompleteStep.push(0)}function g(t,e,n){if(e)if(n.xVal[t]!==n.xVal[t+1]){n.xSteps[t]=p([n.xVal[t],n.xVal[t+1]],e)/h(n.xPct[t],n.xPct[t+1]);var r=(n.xVal[t+1]-n.xVal[t])/n.xNumSteps[t],i=Math.ceil(Number(r.toFixed(3))-1),o=n.xVal[t]+n.xNumSteps[t]*i;n.xHighestCompleteStep[t]=o}else n.xSteps[t]=n.xHighestCompleteStep[t]=n.xVal[t]}function m(t,e,n){var r;this.xPct=[],this.xVal=[],this.xSteps=[n||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=e;var i=[];for(r in t)t.hasOwnProperty(r)&&i.push([t[r],r]);for(i.length&&"object"==typeof i[0][0]?i.sort((function(t,e){return t[0][0]-e[0][0]})):i.sort((function(t,e){return t[0]-e[0]})),r=0;r<i.length;r++)b(i[r][1],i[r][0],this);for(this.xNumSteps=this.xSteps.slice(0),r=0;r<this.xNumSteps.length;r++)g(r,this.xNumSteps[r],this)}m.prototype.getMargin=function(t){var e=this.xNumSteps[0];if(e&&t/e%1!=0)throw new Error("noUiSlider (14.2.0): 'limit', 'margin' and 'padding' must be divisible by step.");return 2===this.xPct.length&&p(this.xVal,t)},m.prototype.toStepping=function(t){return t=v(this.xVal,this.xPct,t)},m.prototype.fromStepping=function(t){return function(t,e,n){if(n>=100)return t.slice(-1)[0];var r=d(n,e),i=t[r-1],o=t[r],s=e[r-1];return function(t,e){return e*(t[1]-t[0])/100+t[0]}([i,o],(n-s)*h(s,e[r]))}(this.xVal,this.xPct,t)},m.prototype.getStep=function(t){return t=y(this.xPct,this.xSteps,this.snap,t)},m.prototype.getDefaultStep=function(t,e,n){var r=d(t,this.xPct);return(100===t||e&&t===this.xPct[r-1])&&(r=Math.max(r-1,1)),(this.xVal[r]-this.xVal[r-1])/n},m.prototype.getNearbySteps=function(t){var e=d(t,this.xPct);return{stepBefore:{startValue:this.xVal[e-2],step:this.xNumSteps[e-2],highestStep:this.xHighestCompleteStep[e-2]},thisStep:{startValue:this.xVal[e-1],step:this.xNumSteps[e-1],highestStep:this.xHighestCompleteStep[e-1]},stepAfter:{startValue:this.xVal[e],step:this.xNumSteps[e],highestStep:this.xHighestCompleteStep[e]}}},m.prototype.countStepDecimals=function(){var t=this.xNumSteps.map(u);return Math.max.apply(null,t)},m.prototype.convert=function(t){return this.getStep(this.toStepping(t))};var _={to:function(t){return void 0!==t&&t.toFixed(2)},from:Number};function S(t){if(function(t){return"object"==typeof t&&"function"==typeof t.to&&"function"==typeof t.from}(t))return!0;throw new Error("noUiSlider (14.2.0): 'format' requires 'to' and 'from' methods.")}function w(t,e){if(!i(e))throw new Error("noUiSlider (14.2.0): 'step' is not numeric.");t.singleStep=e}function x(t,e){if("object"!=typeof e||Array.isArray(e))throw new Error("noUiSlider (14.2.0): 'range' is not an object.");if(void 0===e.min||void 0===e.max)throw new Error("noUiSlider (14.2.0): Missing 'min' or 'max' in 'range'.");if(e.min===e.max)throw new Error("noUiSlider (14.2.0): 'range' 'min' and 'max' cannot be equal.");t.spectrum=new m(e,t.snap,t.singleStep)}function E(t,e){if(e=a(e),!Array.isArray(e)||!e.length)throw new Error("noUiSlider (14.2.0): 'start' option is incorrect.");t.handles=e.length,t.start=e}function R(t,e){if(t.snap=e,"boolean"!=typeof e)throw new Error("noUiSlider (14.2.0): 'snap' option must be a boolean.")}function A(t,e){if(t.animate=e,"boolean"!=typeof e)throw new Error("noUiSlider (14.2.0): 'animate' option must be a boolean.")}function O(t,e){if(t.animationDuration=e,"number"!=typeof e)throw new Error("noUiSlider (14.2.0): 'animationDuration' option must be a number.")}function P(t,e){var n,r=[!1];if("lower"===e?e=[!0,!1]:"upper"===e&&(e=[!1,!0]),!0===e||!1===e){for(n=1;n<t.handles;n++)r.push(e);r.push(!1)}else{if(!Array.isArray(e)||!e.length||e.length!==t.handles+1)throw new Error("noUiSlider (14.2.0): 'connect' option doesn't match handle count.");r=e}t.connect=r}function T(t,e){switch(e){case"horizontal":t.ort=0;break;case"vertical":t.ort=1;break;default:throw new Error("noUiSlider (14.2.0): 'orientation' option is invalid.")}}function C(t,e){if(!i(e))throw new Error("noUiSlider (14.2.0): 'margin' option must be numeric.");if(0!==e&&(t.margin=t.spectrum.getMargin(e),!t.margin))throw new Error("noUiSlider (14.2.0): 'margin' option is only supported on linear sliders.")}function I(t,e){if(!i(e))throw new Error("noUiSlider (14.2.0): 'limit' option must be numeric.");if(t.limit=t.spectrum.getMargin(e),!t.limit||t.handles<2)throw new Error("noUiSlider (14.2.0): 'limit' option is only supported on linear sliders with 2 or more handles.")}function N(t,e){if(!i(e)&&!Array.isArray(e))throw new Error("noUiSlider (14.2.0): 'padding' option must be numeric or array of exactly 2 numbers.");if(Array.isArray(e)&&2!==e.length&&!i(e[0])&&!i(e[1]))throw new Error("noUiSlider (14.2.0): 'padding' option must be numeric or array of exactly 2 numbers.");if(0!==e){if(Array.isArray(e)||(e=[e,e]),t.padding=[t.spectrum.getMargin(e[0]),t.spectrum.getMargin(e[1])],!1===t.padding[0]||!1===t.padding[1])throw new Error("noUiSlider (14.2.0): 'padding' option is only supported on linear sliders.");if(t.padding[0]<0||t.padding[1]<0)throw new Error("noUiSlider (14.2.0): 'padding' option must be a positive number(s).");if(t.padding[0]+t.padding[1]>100)throw new Error("noUiSlider (14.2.0): 'padding' option must not exceed 100% of the range.")}}function j(t,e){switch(e){case"ltr":t.dir=0;break;case"rtl":t.dir=1;break;default:throw new Error("noUiSlider (14.2.0): 'direction' option was not recognized.")}}function D(t,e){if("string"!=typeof e)throw new Error("noUiSlider (14.2.0): 'behaviour' must be a string containing options.");var n=e.indexOf("tap")>=0,r=e.indexOf("drag")>=0,i=e.indexOf("fixed")>=0,o=e.indexOf("snap")>=0,s=e.indexOf("hover")>=0,a=e.indexOf("unconstrained")>=0;if(i){if(2!==t.handles)throw new Error("noUiSlider (14.2.0): 'fixed' behaviour must be used with 2 handles");C(t,t.start[1]-t.start[0])}if(a&&(t.margin||t.limit))throw new Error("noUiSlider (14.2.0): 'unconstrained' behaviour cannot be used with margin or limit");t.events={tap:n||o,drag:r,fixed:i,snap:o,hover:s,unconstrained:a}}function M(t,e){if(!1!==e)if(!0===e){t.tooltips=[];for(var n=0;n<t.handles;n++)t.tooltips.push(!0)}else{if(t.tooltips=a(e),t.tooltips.length!==t.handles)throw new Error("noUiSlider (14.2.0): must pass a formatter for all handles.");t.tooltips.forEach((function(t){if("boolean"!=typeof t&&("object"!=typeof t||"function"!=typeof t.to))throw new Error("noUiSlider (14.2.0): 'tooltips' must be passed a formatter or 'false'.")}))}}function V(t,e){t.ariaFormat=e,S(e)}function k(t,e){t.format=e,S(e)}function U(t,e){if(t.keyboardSupport=e,"boolean"!=typeof e)throw new Error("noUiSlider (14.2.0): 'keyboardSupport' option must be a boolean.")}function L(t,e){t.documentElement=e}function B(t,e){if("string"!=typeof e&&!1!==e)throw new Error("noUiSlider (14.2.0): 'cssPrefix' must be a string or `false`.");t.cssPrefix=e}function F(t,e){if("object"!=typeof e)throw new Error("noUiSlider (14.2.0): 'cssClasses' must be an object.");if("string"==typeof t.cssPrefix)for(var n in t.cssClasses={},e)e.hasOwnProperty(n)&&(t.cssClasses[n]=t.cssPrefix+e[n]);else t.cssClasses=e}function z(t){var e={margin:0,limit:0,padding:0,animate:!0,animationDuration:300,ariaFormat:_,format:_},r={step:{r:!1,t:w},start:{r:!0,t:E},connect:{r:!0,t:P},direction:{r:!0,t:j},snap:{r:!1,t:R},animate:{r:!1,t:A},animationDuration:{r:!1,t:O},range:{r:!0,t:x},orientation:{r:!1,t:T},margin:{r:!1,t:C},limit:{r:!1,t:I},padding:{r:!1,t:N},behaviour:{r:!0,t:D},ariaFormat:{r:!1,t:V},format:{r:!1,t:k},tooltips:{r:!1,t:M},keyboardSupport:{r:!0,t:U},documentElement:{r:!1,t:L},cssPrefix:{r:!0,t:B},cssClasses:{r:!0,t:F}},i={connect:!1,direction:"ltr",behaviour:"tap",orientation:"horizontal",keyboardSupport:!0,cssPrefix:"noUi-",cssClasses:{target:"target",base:"base",origin:"origin",handle:"handle",handleLower:"handle-lower",handleUpper:"handle-upper",touchArea:"touch-area",horizontal:"horizontal",vertical:"vertical",background:"background",connect:"connect",connects:"connects",ltr:"ltr",rtl:"rtl",textDirectionLtr:"txt-dir-ltr",textDirectionRtl:"txt-dir-rtl",draggable:"draggable",drag:"state-drag",tap:"state-tap",active:"active",tooltip:"tooltip",pips:"pips",pipsHorizontal:"pips-horizontal",pipsVertical:"pips-vertical",marker:"marker",markerHorizontal:"marker-horizontal",markerVertical:"marker-vertical",markerNormal:"marker-normal",markerLarge:"marker-large",markerSub:"marker-sub",value:"value",valueHorizontal:"value-horizontal",valueVertical:"value-vertical",valueNormal:"value-normal",valueLarge:"value-large",valueSub:"value-sub"}};t.format&&!t.ariaFormat&&(t.ariaFormat=t.format),Object.keys(r).forEach((function(o){if(!n(t[o])&&void 0===i[o]){if(r[o].r)throw new Error("noUiSlider (14.2.0): '"+o+"' is required.");return!0}r[o].t(e,n(t[o])?t[o]:i[o])})),e.pips=t.pips;var o=document.createElement("div"),s=void 0!==o.style.msTransform,a=void 0!==o.style.transform;return e.transformRule=a?"transform":s?"msTransform":"webkitTransform",e.style=[["left","top"],["right","bottom"]][e.dir][e.ort],e}function q(t,n,i){var u,h,p,d,v,y,b,g,m=window.navigator.pointerEnabled?{start:"pointerdown",move:"pointermove",end:"pointerup"}:window.navigator.msPointerEnabled?{start:"MSPointerDown",move:"MSPointerMove",end:"MSPointerUp"}:{start:"mousedown touchstart",move:"mousemove touchmove",end:"mouseup touchend"},_=window.CSS&&CSS.supports&&CSS.supports("touch-action","none")&&function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("test",null,e)}catch(t){}return t}(),S=t,w=n.spectrum,x=[],E=[],R=[],A=0,O={},P=t.ownerDocument,T=n.documentElement||P.documentElement,C=P.body,I="rtl"===P.dir||1===n.ort?0:100;function N(t,e){var n=P.createElement("div");return e&&c(n,e),t.appendChild(n),n}function j(t,e){var r=N(t,n.cssClasses.origin),i=N(r,n.cssClasses.handle);return N(i,n.cssClasses.touchArea),i.setAttribute("data-handle",e),n.keyboardSupport&&(i.setAttribute("tabindex","0"),i.addEventListener("keydown",(function(t){return function(t,e){if(V()||k(e))return!1;var r=["Left","Right"],i=["Down","Up"],o=["PageDown","PageUp"],s=["Home","End"];n.dir&&!n.ort?r.reverse():n.ort&&!n.dir&&(i.reverse(),o.reverse());var a,u=t.key.replace("Arrow",""),c=u===o[0],l=u===o[1],f=u===i[0]||u===r[0]||c,h=u===i[1]||u===r[1]||l,p=u===s[0],d=u===s[1];if(!(f||h||p||d))return!0;if(t.preventDefault(),h||f){var v=f?0:1,y=ht(e)[v];if(null===y)return!1;!1===y&&(y=w.getDefaultStep(E[e],f,10)),(l||c)&&(y*=5),y=Math.max(y,1e-7),y*=f?-1:1,a=x[e]+y}else a=d?n.spectrum.xVal[n.spectrum.xVal.length-1]:n.spectrum.xVal[0];return at(e,w.toStepping(a),!0,!0),et("slide",e),et("update",e),et("change",e),et("set",e),!1}(t,e)}))),i.setAttribute("role","slider"),i.setAttribute("aria-orientation",n.ort?"vertical":"horizontal"),0===e?c(i,n.cssClasses.handleLower):e===n.handles-1&&c(i,n.cssClasses.handleUpper),r}function D(t,e){return!!e&&N(t,n.cssClasses.connect)}function M(t,e){return!!n.tooltips[e]&&N(t.firstChild,n.cssClasses.tooltip)}function V(){return S.hasAttribute("disabled")}function k(t){return h[t].hasAttribute("disabled")}function U(){v&&(tt("update.tooltips"),v.forEach((function(t){t&&e(t)})),v=null)}function L(){U(),v=h.map(M),$("update.tooltips",(function(t,e,r){if(v[e]){var i=t[e];!0!==n.tooltips[e]&&(i=n.tooltips[e].to(r[e])),v[e].innerHTML=i}}))}function B(t,e,r){var i=P.createElement("div"),o=[];o[0]=n.cssClasses.valueNormal,o[1]=n.cssClasses.valueLarge,o[2]=n.cssClasses.valueSub;var s=[];s[0]=n.cssClasses.markerNormal,s[1]=n.cssClasses.markerLarge,s[2]=n.cssClasses.markerSub;var a=[n.cssClasses.valueHorizontal,n.cssClasses.valueVertical],u=[n.cssClasses.markerHorizontal,n.cssClasses.markerVertical];function l(t,e){var r=e===n.cssClasses.value,i=r?o:s;return e+" "+(r?a:u)[n.ort]+" "+i[t]}return c(i,n.cssClasses.pips),c(i,0===n.ort?n.cssClasses.pipsHorizontal:n.cssClasses.pipsVertical),Object.keys(t).forEach((function(o){!function(t,o,s){if(-1!==(s=e?e(o,s):s)){var a=N(i,!1);a.className=l(s,n.cssClasses.marker),a.style[n.style]=t+"%",s>0&&((a=N(i,!1)).className=l(s,n.cssClasses.value),a.setAttribute("data-value",o),a.style[n.style]=t+"%",a.innerHTML=r.to(o))}}(o,t[o][0],t[o][1])})),i}function F(){d&&(e(d),d=null)}function q(t){F();var e=t.mode,n=t.density||1,r=t.filter||!1,i=function(t,e,n){if("range"===t||"steps"===t)return w.xVal;if("count"===t){if(e<2)throw new Error("noUiSlider (14.2.0): 'values' (>= 2) required for mode 'count'.");var r=e-1,i=100/r;for(e=[];r--;)e[r]=r*i;e.push(100),t="positions"}return"positions"===t?e.map((function(t){return w.fromStepping(n?w.getStep(t):t)})):"values"===t?n?e.map((function(t){return w.fromStepping(w.getStep(w.toStepping(t)))})):e:void 0}(e,t.values||!1,t.stepped||!1),o=function(t,e,n){var r,i={},o=w.xVal[0],s=w.xVal[w.xVal.length-1],a=!1,u=!1,c=0;return r=n.slice().sort((function(t,e){return t-e})),(n=r.filter((function(t){return!this[t]&&(this[t]=!0)}),{}))[0]!==o&&(n.unshift(o),a=!0),n[n.length-1]!==s&&(n.push(s),u=!0),n.forEach((function(r,o){var s,l,f,h,p,d,v,y,b,g,m=r,_=n[o+1],S="steps"===e;if(S&&(s=w.xNumSteps[o]),s||(s=_-m),!1!==m&&void 0!==_)for(s=Math.max(s,1e-7),l=m;l<=_;l=(l+s).toFixed(7)/1){for(y=(p=(h=w.toStepping(l))-c)/t,g=p/(b=Math.round(y)),f=1;f<=b;f+=1)i[(d=c+f*g).toFixed(5)]=[w.fromStepping(d),0];v=n.indexOf(l)>-1?1:S?2:0,!o&&a&&l!==_&&(v=0),l===_&&u||(i[h.toFixed(5)]=[l,v]),c=h}})),i}(n,e,i),s=t.format||{to:Math.round};return d=S.appendChild(B(o,r,s))}function W(){var t=u.getBoundingClientRect(),e="offset"+["Width","Height"][n.ort];return 0===n.ort?t.width||u[e]:t.height||u[e]}function H(t,e,r,i){var o=function(o){return!!(o=function(t,e,n){var r,i,o=0===t.type.indexOf("touch"),s=0===t.type.indexOf("mouse"),a=0===t.type.indexOf("pointer");if(0===t.type.indexOf("MSPointer")&&(a=!0),o){var u=function(t){return t.target===n||n.contains(t.target)||t.target.shadowRoot&&t.target.shadowRoot.contains(n)};if("touchstart"===t.type){var c=Array.prototype.filter.call(t.touches,u);if(c.length>1)return!1;r=c[0].pageX,i=c[0].pageY}else{var l=Array.prototype.find.call(t.changedTouches,u);if(!l)return!1;r=l.pageX,i=l.pageY}}return e=e||f(P),(s||a)&&(r=t.clientX+e.x,i=t.clientY+e.y),t.pageOffset=e,t.points=[r,i],t.cursor=s||a,t}(o,i.pageOffset,i.target||e))&&!(V()&&!i.doNotReject)&&(s=S,a=n.cssClasses.tap,!((s.classList?s.classList.contains(a):new RegExp("\\b"+a+"\\b").test(s.className))&&!i.doNotReject)&&!(t===m.start&&void 0!==o.buttons&&o.buttons>1)&&(!i.hover||!o.buttons)&&(_||o.preventDefault(),o.calcPoint=o.points[n.ort],void r(o,i)));var s,a},s=[];return t.split(" ").forEach((function(t){e.addEventListener(t,o,!!_&&{passive:!0}),s.push([t,o])})),s}function Y(t){var e,r,i,o,a,c,l=100*(t-(e=u,r=n.ort,i=e.getBoundingClientRect(),o=e.ownerDocument,a=o.documentElement,c=f(o),/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(c.x=0),r?i.top+c.y-a.clientTop:i.left+c.x-a.clientLeft))/W();return l=s(l),n.dir?100-l:l}function G(t,e){"mouseout"===t.type&&"HTML"===t.target.nodeName&&null===t.relatedTarget&&X(t,e)}function K(t,e){if(-1===navigator.appVersion.indexOf("MSIE 9")&&0===t.buttons&&0!==e.buttonsProperty)return X(t,e);var r=(n.dir?-1:1)*(t.calcPoint-e.startCalcPoint);it(r>0,100*r/e.baseSize,e.locations,e.handleNumbers)}function X(t,e){e.handle&&(l(e.handle,n.cssClasses.active),A-=1),e.listeners.forEach((function(t){T.removeEventListener(t[0],t[1])})),0===A&&(l(S,n.cssClasses.drag),st(),t.cursor&&(C.style.cursor="",C.removeEventListener("selectstart",r))),e.handleNumbers.forEach((function(t){et("change",t),et("set",t),et("end",t)}))}function J(t,e){if(e.handleNumbers.some(k))return!1;var i;1===e.handleNumbers.length&&(i=h[e.handleNumbers[0]].children[0],A+=1,c(i,n.cssClasses.active)),t.stopPropagation();var o=[],s=H(m.move,T,K,{target:t.target,handle:i,listeners:o,startCalcPoint:t.calcPoint,baseSize:W(),pageOffset:t.pageOffset,handleNumbers:e.handleNumbers,buttonsProperty:t.buttons,locations:E.slice()}),a=H(m.end,T,X,{target:t.target,handle:i,listeners:o,doNotReject:!0,handleNumbers:e.handleNumbers}),u=H("mouseout",T,G,{target:t.target,handle:i,listeners:o,doNotReject:!0,handleNumbers:e.handleNumbers});o.push.apply(o,s.concat(a,u)),t.cursor&&(C.style.cursor=getComputedStyle(t.target).cursor,h.length>1&&c(S,n.cssClasses.drag),C.addEventListener("selectstart",r,!1)),e.handleNumbers.forEach((function(t){et("start",t)}))}function Z(t){t.stopPropagation();var e=Y(t.calcPoint),r=function(t){var e=100,n=!1;return h.forEach((function(r,i){if(!k(i)){var o=E[i],s=Math.abs(o-t);(s<e||s<=e&&t>o||100===s&&100===e)&&(n=i,e=s)}})),n}(e);if(!1===r)return!1;n.events.snap||o(S,n.cssClasses.tap,n.animationDuration),at(r,e,!0,!0),st(),et("slide",r,!0),et("update",r,!0),et("change",r,!0),et("set",r,!0),n.events.snap&&J(t,{handleNumbers:[r]})}function Q(t){var e=Y(t.calcPoint),n=w.getStep(e),r=w.fromStepping(n);Object.keys(O).forEach((function(t){"hover"===t.split(".")[0]&&O[t].forEach((function(t){t.call(y,r)}))}))}function $(t,e){O[t]=O[t]||[],O[t].push(e),"update"===t.split(".")[0]&&h.forEach((function(t,e){et("update",e)}))}function tt(t){var e=t&&t.split(".")[0],n=e&&t.substring(e.length);Object.keys(O).forEach((function(t){var r=t.split(".")[0],i=t.substring(r.length);e&&e!==r||n&&n!==i||delete O[t]}))}function et(t,e,r){Object.keys(O).forEach((function(i){var o=i.split(".")[0];t===o&&O[i].forEach((function(t){t.call(y,x.map(n.format.to),e,x.slice(),r||!1,E.slice(),y)}))}))}function nt(t,e,r,i,o,a){return h.length>1&&!n.events.unconstrained&&(i&&e>0&&(r=Math.max(r,t[e-1]+n.margin)),o&&e<h.length-1&&(r=Math.min(r,t[e+1]-n.margin))),h.length>1&&n.limit&&(i&&e>0&&(r=Math.min(r,t[e-1]+n.limit)),o&&e<h.length-1&&(r=Math.max(r,t[e+1]-n.limit))),n.padding&&(0===e&&(r=Math.max(r,n.padding[0])),e===h.length-1&&(r=Math.min(r,100-n.padding[1]))),!((r=s(r=w.getStep(r)))===t[e]&&!a)&&r}function rt(t,e){var r=n.ort;return(r?e:t)+", "+(r?t:e)}function it(t,e,n,r){var i=n.slice(),o=[!t,t],s=[t,!t];r=r.slice(),t&&r.reverse(),r.length>1?r.forEach((function(t,n){var r=nt(i,t,i[t]+e,o[n],s[n],!1);!1===r?e=0:(e=r-i[t],i[t]=r)})):o=s=[!0];var a=!1;r.forEach((function(t,r){a=at(t,n[t]+e,o[r],s[r])||a})),a&&r.forEach((function(t){et("update",t),et("slide",t)}))}function ot(t,e){return n.dir?100-t-e:t}function st(){R.forEach((function(t){var e=E[t]>50?-1:1,n=3+(h.length+e*t);h[t].style.zIndex=n}))}function at(t,e,r,i){return!1!==(e=nt(E,t,e,r,i,!1))&&(function(t,e){E[t]=e,x[t]=w.fromStepping(e);var r="translate("+rt(10*(ot(e,0)-I)+"%","0")+")";h[t].style[n.transformRule]=r,ut(t),ut(t+1)}(t,e),!0)}function ut(t){if(p[t]){var e=0,r=100;0!==t&&(e=E[t-1]),t!==p.length-1&&(r=E[t]);var i=r-e,o="translate("+rt(ot(e,i)+"%","0")+")",s="scale("+rt(i/100,"1")+")";p[t].style[n.transformRule]=o+" "+s}}function ct(t,e){return null===t||!1===t||void 0===t?E[e]:("number"==typeof t&&(t=String(t)),t=n.format.from(t),!1===(t=w.toStepping(t))||isNaN(t)?E[e]:t)}function lt(t,e){var r=a(t),i=void 0===E[0];e=void 0===e||!!e,n.animate&&!i&&o(S,n.cssClasses.tap,n.animationDuration),R.forEach((function(t){at(t,ct(r[t],t),!0,!1)}));for(var s=1===R.length?0:1;s<R.length;++s)R.forEach((function(t){at(t,E[t],!0,!0)}));st(),R.forEach((function(t){et("update",t),null!==r[t]&&e&&et("set",t)}))}function ft(){var t=x.map(n.format.to);return 1===t.length?t[0]:t}function ht(t){var e=E[t],r=w.getNearbySteps(e),i=x[t],o=r.thisStep.step,s=null;if(n.snap)return[i-r.stepBefore.startValue||null,r.stepAfter.startValue-i||null];!1!==o&&i+o>r.stepAfter.startValue&&(o=r.stepAfter.startValue-i),s=i>r.thisStep.startValue?r.thisStep.step:!1!==r.stepBefore.step&&i-r.stepBefore.highestStep,100===e?o=null:0===e&&(s=null);var a=w.countStepDecimals();return null!==o&&!1!==o&&(o=Number(o.toFixed(a))),null!==s&&!1!==s&&(s=Number(s.toFixed(a))),[s,o]}return c(b=S,n.cssClasses.target),0===n.dir?c(b,n.cssClasses.ltr):c(b,n.cssClasses.rtl),0===n.ort?c(b,n.cssClasses.horizontal):c(b,n.cssClasses.vertical),c(b,"rtl"===getComputedStyle(b).direction?n.cssClasses.textDirectionRtl:n.cssClasses.textDirectionLtr),u=N(b,n.cssClasses.base),function(t,e){var r=N(e,n.cssClasses.connects);h=[],(p=[]).push(D(r,t[0]));for(var i=0;i<n.handles;i++)h.push(j(e,i)),R[i]=i,p.push(D(r,t[i+1]))}(n.connect,u),(g=n.events).fixed||h.forEach((function(t,e){H(m.start,t.children[0],J,{handleNumbers:[e]})})),g.tap&&H(m.start,u,Z,{}),g.hover&&H(m.move,u,Q,{hover:!0}),g.drag&&p.forEach((function(t,e){if(!1!==t&&0!==e&&e!==p.length-1){var r=h[e-1],i=h[e],o=[t];c(t,n.cssClasses.draggable),g.fixed&&(o.push(r.children[0]),o.push(i.children[0])),o.forEach((function(t){H(m.start,t,J,{handles:[r,i],handleNumbers:[e-1,e]})}))}})),lt(n.start),n.pips&&q(n.pips),n.tooltips&&L(),$("update",(function(t,e,r,i,o){R.forEach((function(t){var e=h[t],i=nt(E,t,0,!0,!0,!0),s=nt(E,t,100,!0,!0,!0),a=o[t],u=n.ariaFormat.to(r[t]);i=w.fromStepping(i).toFixed(1),s=w.fromStepping(s).toFixed(1),a=w.fromStepping(a).toFixed(1),e.children[0].setAttribute("aria-valuemin",i),e.children[0].setAttribute("aria-valuemax",s),e.children[0].setAttribute("aria-valuenow",a),e.children[0].setAttribute("aria-valuetext",u)}))})),y={destroy:function(){for(var t in n.cssClasses)n.cssClasses.hasOwnProperty(t)&&l(S,n.cssClasses[t]);for(;S.firstChild;)S.removeChild(S.firstChild);delete S.noUiSlider},steps:function(){return R.map(ht)},on:$,off:tt,get:ft,set:lt,setHandle:function(t,e,n){if(!((t=Number(t))>=0&&t<R.length))throw new Error("noUiSlider (14.2.0): invalid handle number, got: "+t);at(t,ct(e,t),!0,!0),et("update",t),n&&et("set",t)},reset:function(t){lt(n.start,t)},__moveHandles:function(t,e,n){it(t,e,E,n)},options:i,updateOptions:function(t,e){var r=ft(),o=["margin","limit","padding","range","animate","snap","step","format","pips","tooltips"];o.forEach((function(e){void 0!==t[e]&&(i[e]=t[e])}));var s=z(i);o.forEach((function(e){void 0!==t[e]&&(n[e]=s[e])})),w=s.spectrum,n.margin=s.margin,n.limit=s.limit,n.padding=s.padding,n.pips?q(n.pips):F(),n.tooltips?L():U(),E=[],lt(t.start||r,e)},target:S,removePips:F,removeTooltips:U,pips:q}}return{__spectrum:m,version:t,create:function(t,e){if(!t||!t.nodeName)throw new Error("noUiSlider (14.2.0): create requires a single element, got: "+t);if(t.noUiSlider)throw new Error("noUiSlider (14.2.0): Slider was already initialized.");var n=q(t,z(e),e);return t.noUiSlider=n,n}}})?r.apply(e,i):r)||(t.exports=o)},function(t,e){var n,r,i=t.exports={};function o(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(t){if(n===setTimeout)return setTimeout(t,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(t,0);try{return n(t,0)}catch(e){try{return n.call(null,t,0)}catch(e){return n.call(this,t,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(t){n=o}try{r="function"==typeof clearTimeout?clearTimeout:s}catch(t){r=s}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var t=a(h);l=!0;for(var e=c.length;e;){for(u=c,c=[];++f<e;)u&&u[f].run();f=-1,e=c.length}u=null,l=!1,function(t){if(r===clearTimeout)return clearTimeout(t);if((r===s||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(t);try{r(t)}catch(e){try{return r.call(null,t)}catch(e){return r.call(this,t)}}}(t)}}function d(t,e){this.fun=t,this.array=e}function v(){}i.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];c.push(new d(t,e)),1!==c.length||l||a(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(t){return[]},i.binding=function(t){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(t){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(t,e){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(t){"object"==typeof window&&(n=window)}t.exports=n},function(t,e,n){"use strict";var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(i,o){function s(t){try{u(r.next(t))}catch(t){o(t)}}function a(t){try{u(r.throw(t))}catch(t){o(t)}}function u(t){var e;t.done?i(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,a)}u((r=r.apply(t,e||[])).next())}))},i=this&&this.__generator||function(t,e){var n,r,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,r=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!(i=s.trys,(i=i.length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}};Object.defineProperty(e,"__esModule",{value:!0});var o=n(4),s=n(16),a=n(1),u=n(17),c=n(0),l=n(8),f=function(){function t(t,e,n,r){this.box=t,this.canvas=e,this.peopleRenderData_=[],this.width_=n,this.height_=r,this.gl_=e.getContext("webgl2",{premutipliedAlpha:!1})}return Object.defineProperty(t.prototype,"width",{get:function(){return this.width_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.height_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"ratio",{get:function(){return this.ratio_},enumerable:!0,configurable:!0}),t.prototype.setSize=function(t,e){this.width_=t,this.height_=e},t.prototype.loadTexture=function(t){var e=this,n=this.gl_;return new Promise((function(r,i){var o=new Image;o.onload=function(){var t=e.gl_.createTexture();e.gl_.bindTexture(e.gl_.TEXTURE_2D,t),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,o),e.gl_.texParameteri(e.gl_.TEXTURE_2D,e.gl_.TEXTURE_MAG_FILTER,e.gl_.LINEAR),e.gl_.texParameteri(e.gl_.TEXTURE_2D,e.gl_.TEXTURE_MIN_FILTER,e.gl_.LINEAR_MIPMAP_NEAREST),e.gl_.generateMipmap(e.gl_.TEXTURE_2D),e.gl_.bindTexture(e.gl_.TEXTURE_2D,null),r(t)},o.src=t}))},t.prototype.initialize=function(){return r(this,void 0,void 0,(function(){var t,e;return i(this,(function(n){switch(n.label){case 0:return t=this.gl_,this.gl_.enable(t.BLEND),t.blendFunc(t.SRC_ALPHA,t.ONE_MINUS_SRC_ALPHA),this.solidShader=new s.Shader(t,"#version 300 es\n        uniform vec2 u_resolution;\n        uniform vec2 u_worldPosition;\n        in vec2 a_position;\n\n        void main() {\n          vec2 position = a_position + u_worldPosition;\n          vec2 normalizedPosition = (position * vec2(2, 2) - u_resolution)\n              / u_resolution;\n          gl_Position = vec4(normalizedPosition * vec2(1, -1), 0.0, 1.0);\n        }\n      ","#version 300 es\n        precision mediump float;\n        uniform vec3 u_color;\n        out vec4 outColor;\n\n        void main() {\n          outColor = vec4(u_color, 1.0);\n        }\n      ",["a_position"],["u_resolution","u_worldPosition","u_color"]),this.solidPositionBuffer=t.createBuffer(),this.solidVAO=t.createVertexArray(),t.bindVertexArray(this.solidVAO),t.enableVertexAttribArray(this.solidShader.getAttributeLocation("a_position")),t.bindBuffer(t.ARRAY_BUFFER,this.solidPositionBuffer),t.vertexAttribPointer(this.solidShader.getAttributeLocation("a_position"),2,t.FLOAT,!1,0,0),this.texShader=new s.Shader(t,"#version 300 es\n\n        uniform vec2 u_resolution;\n        in vec2 a_vertex;\n        in vec2 a_position;\n        in vec2 a_texCoord;\n        in vec3 a_color;\n        out vec2 v_texCoord;\n        out vec3 v_color;\n\n        void main() {\n          vec2 position = a_vertex + a_position;\n          vec2 normalizedPosition = (position * vec2(2, 2) - u_resolution)\n              / u_resolution;\n          gl_Position = vec4(normalizedPosition * vec2(1, -1), 0.0, 1.0);\n\n          v_texCoord = a_texCoord;\n          v_color = a_color;\n        }\n      ","#version 300 es\n        precision mediump float;\n        in vec2 v_texCoord;\n        in vec3 v_color;\n        \n        uniform sampler2D u_texture;\n        out vec4 outColor;\n\n        void main() {\n          outColor = texture(u_texture, v_texCoord) * vec4(v_color, 1);\n        }\n      ",["a_vertex","a_position","a_texCoord","a_color"],["u_resolution","u_texture"]),this.texPositionBuffer=t.createBuffer(),this.texVertexBuffer=t.createBuffer(),this.texTexCoordBuffer=t.createBuffer(),this.texColorBuffer=t.createBuffer(),this.texVAO=t.createVertexArray(),t.bindVertexArray(this.texVAO),t.enableVertexAttribArray(this.texShader.getAttributeLocation("a_vertex")),t.bindBuffer(t.ARRAY_BUFFER,this.texVertexBuffer),t.vertexAttribPointer(this.texShader.getAttributeLocation("a_vertex"),2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(this.texShader.getAttributeLocation("a_position")),t.bindBuffer(t.ARRAY_BUFFER,this.texPositionBuffer),t.vertexAttribPointer(this.texShader.getAttributeLocation("a_position"),2,t.FLOAT,!1,0,0),t.vertexAttribDivisor(this.texShader.getAttributeLocation("a_position"),1),t.enableVertexAttribArray(this.texShader.getAttributeLocation("a_texCoord")),t.bindBuffer(t.ARRAY_BUFFER,this.texTexCoordBuffer),t.vertexAttribPointer(this.texShader.getAttributeLocation("a_texCoord"),2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(this.texShader.getAttributeLocation("a_color")),t.bindBuffer(t.ARRAY_BUFFER,this.texColorBuffer),t.vertexAttribPointer(this.texShader.getAttributeLocation("a_color"),3,t.FLOAT,!1,0,0),t.vertexAttribDivisor(this.texShader.getAttributeLocation("a_color"),1),this.rippleShader=new s.Shader(t,"#version 300 es\n        precision mediump float;\n\n        uniform vec2 u_resolution;\n        in vec2 a_vertex;\n        in vec2 a_position;\n        in vec2 a_texCoord;\n        in vec3 a_color;\n        in float a_time;\n\n        out vec2 v_texCoord;\n        out vec3 v_color;\n        out float v_time;\n        out vec2 v_fragCoord;\n\n        void main() {\n          v_fragCoord = a_vertex;\n          vec2 position = a_vertex + a_position;\n          vec2 normalizedPosition = (position * vec2(2, 2) - u_resolution)\n              / u_resolution;\n          gl_Position = vec4(normalizedPosition * vec2(1, -1), 0.0, 1.0);\n\n          v_texCoord = a_texCoord;\n          v_color = a_color;\n          v_time = a_time;\n        }\n      ","#version 300 es\n        precision mediump float;\n\n        uniform float u_radius;\n\n        in vec2 v_texCoord;\n        in vec3 v_color;\n        in vec2 v_fragCoord;\n        in float v_time;\n\n        uniform sampler2D u_texture;\n\n        out vec4 outColor;\n\n        void main() {\n          float len = length(v_fragCoord);\n          float from = v_time * u_radius;\n          float thickness = 10.0 * (1.0 - v_time);\n          float to = from + thickness;\n          outColor = vec4(0.0, 0.0, 0.0, 0.0);\n          if (from <= len && len <= to) {\n            outColor = texture(u_texture, v_texCoord) * vec4(v_color, 1.0 - v_time);\n          }\n        }\n      ",["a_vertex","a_position","a_texCoord","a_color","a_time"],["u_resolution","u_radius","u_texture"]),this.ripplePositionBuffer=t.createBuffer(),this.rippleVertexBuffer=t.createBuffer(),this.rippleTexCoordBuffer=t.createBuffer(),this.rippleColorBuffer=t.createBuffer(),this.rippleTimeBuffer=t.createBuffer(),this.rippleVAO=t.createVertexArray(),t.bindVertexArray(this.rippleVAO),t.enableVertexAttribArray(this.rippleShader.getAttributeLocation("a_position")),t.bindBuffer(t.ARRAY_BUFFER,this.ripplePositionBuffer),t.vertexAttribPointer(this.rippleShader.getAttributeLocation("a_position"),2,t.FLOAT,!1,0,0),t.vertexAttribDivisor(this.rippleShader.getAttributeLocation("a_position"),1),t.enableVertexAttribArray(this.rippleShader.getAttributeLocation("a_vertex")),t.bindBuffer(t.ARRAY_BUFFER,this.rippleVertexBuffer),t.vertexAttribPointer(this.rippleShader.getAttributeLocation("a_vertex"),2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(this.rippleShader.getAttributeLocation("a_texCoord")),t.bindBuffer(t.ARRAY_BUFFER,this.rippleTexCoordBuffer),t.vertexAttribPointer(this.rippleShader.getAttributeLocation("a_texCoord"),2,t.FLOAT,!1,0,0),t.enableVertexAttribArray(this.rippleShader.getAttributeLocation("a_color")),t.bindBuffer(t.ARRAY_BUFFER,this.rippleColorBuffer),t.vertexAttribPointer(this.rippleShader.getAttributeLocation("a_color"),3,t.FLOAT,!1,0,0),t.vertexAttribDivisor(this.rippleShader.getAttributeLocation("a_color"),1),t.enableVertexAttribArray(this.rippleShader.getAttributeLocation("a_time")),t.bindBuffer(t.ARRAY_BUFFER,this.rippleTimeBuffer),t.vertexAttribPointer(this.rippleShader.getAttributeLocation("a_time"),1,t.FLOAT,!1,0,0),t.vertexAttribDivisor(this.rippleShader.getAttributeLocation("a_time"),1),this.personVertices_=new Float32Array(18e5),this.personColorVertices_=new Float32Array(45e4),this.personTexVertices_=new Float32Array(600),this.rippleVertices_=new Float32Array(18e5),this.rippleColorVertices_=new Float32Array(45e4),this.rippleTexVertices_=new Float32Array(600),this.rippleTimeVertices_=new Float32Array(15e4),t.activeTexture(t.TEXTURE0),e=this,[4,this.loadTexture("./circle.png")];case 1:return e.circleTexture_=n.sent(),[2]}}))}))},t.prototype.renderPerson=function(t){},t.prototype.drawWorld=function(t){},t.prototype.drawSociety=function(t){var e=this,n=this.gl_;n.useProgram(this.solidShader.program),n.bindVertexArray(this.solidVAO),n.bindBuffer(n.ARRAY_BUFFER,this.solidPositionBuffer),n.uniform2f(this.solidShader.getUniformLocation("u_resolution"),this.width,this.height),n.uniform2f(this.solidShader.getUniformLocation("u_worldPosition"),0,0);var r=t.societies.slice(0);r.push(t.quarantine),r.forEach((function(t){var r=t.transform.position.x,i=r+t.width,o=t.transform.position.y,s=o+t.height;t.quarantine?n.uniform3f(e.solidShader.getUniformLocation("u_color"),.6,.5,.2):n.uniform3f(e.solidShader.getUniformLocation("u_color"),.4,.4,.4),n.bufferData(n.ARRAY_BUFFER,new Float32Array([r,o,i,o,i,s,r,s,r,o]),n.STATIC_DRAW),n.drawArrays(n.LINE_STRIP,0,5)}))},t.prototype.drawPeople=function(t){var e=this,n=this.gl_;n.useProgram(this.texShader.program),n.bindVertexArray(this.texVAO),n.uniform2f(this.texShader.getUniformLocation("u_resolution"),this.width,this.height),n.uniform2f(this.texShader.getUniformLocation("u_worldPosition"),0,0),n.uniform1i(this.texShader.getUniformLocation("u_texture"),0),n.bindTexture(n.TEXTURE_2D,this.circleTexture_);var r=0,i=t.societies.slice(0);i.push(t.quarantine),i.forEach((function(t){t.people.forEach((function(t){var n=t.transform.position.x,i=t.transform.position.y;switch(e.personVertices_.set([n,i],2*r),t.state){case o.SIRState.Suspectible:e.personColorVertices_.set([u.ColorPalette.PERSON_SUSCEPTIBLE.r,u.ColorPalette.PERSON_SUSCEPTIBLE.g,u.ColorPalette.PERSON_SUSCEPTIBLE.b],3*r);break;case o.SIRState.Infectious:e.personColorVertices_.set([u.ColorPalette.PERSON_INFECTED.r,u.ColorPalette.PERSON_INFECTED.g,u.ColorPalette.PERSON_INFECTED.b],3*r);break;case o.SIRState.Infectious_Unknown:e.personColorVertices_.set([u.ColorPalette.PERSON_INFECTED_UNKNOWN.r,u.ColorPalette.PERSON_INFECTED_UNKNOWN.g,u.ColorPalette.PERSON_INFECTED_UNKNOWN.b],3*r);break;case o.SIRState.Recovered:e.personColorVertices_.set([u.ColorPalette.PERSON_RECOVERED.r,u.ColorPalette.PERSON_RECOVERED.g,u.ColorPalette.PERSON_RECOVERED.b],3*r)}r++}))})),n.bindBuffer(n.ARRAY_BUFFER,this.texVertexBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-5,-5,5,-5,5,5,-5,-5,-5,5,5,5]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,this.texTexCoordBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array([0,0,1,0,1,1,0,0,0,1,1,1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,this.texPositionBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array(this.personVertices_.buffer,0,2*r),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,this.texColorBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array(this.personColorVertices_.buffer,0,3*r),n.STATIC_DRAW),n.drawArraysInstanced(n.TRIANGLES,0,6,r)},t.prototype.drawRipple=function(t){var e=this,n=this.gl_;n.useProgram(this.rippleShader.program),n.bindVertexArray(this.rippleVAO),n.bindBuffer(n.ARRAY_BUFFER,this.ripplePositionBuffer),n.uniform2f(this.rippleShader.getUniformLocation("u_resolution"),this.width,this.height),n.uniform1f(this.rippleShader.getUniformLocation("u_radius"),c.SIRModel.infectionRadius),n.uniform1i(this.rippleShader.getUniformLocation("u_texture"),0),n.bindTexture(n.TEXTURE_2D,this.circleTexture_);var r=0;t.societies.forEach((function(t){t.people.forEach((function(t){if(t.hasRipple){var n=t.transform.position.x,i=t.transform.position.y;switch(e.rippleVertices_.set([n,i],2*r),t.state){case o.SIRState.Suspectible:e.rippleColorVertices_.set([u.ColorPalette.PERSON_SUSCEPTIBLE.r,u.ColorPalette.PERSON_SUSCEPTIBLE.g,u.ColorPalette.PERSON_SUSCEPTIBLE.b],3*r);break;case o.SIRState.Infectious:e.rippleColorVertices_.set([u.ColorPalette.PERSON_INFECTED.r,u.ColorPalette.PERSON_INFECTED.g,u.ColorPalette.PERSON_INFECTED.b],3*r);break;case o.SIRState.Infectious_Unknown:e.rippleColorVertices_.set([u.ColorPalette.PERSON_INFECTED_UNKNOWN.r,u.ColorPalette.PERSON_INFECTED_UNKNOWN.g,u.ColorPalette.PERSON_INFECTED_UNKNOWN.b],3*r);break;case o.SIRState.Recovered:e.rippleColorVertices_.set([u.ColorPalette.PERSON_RECOVERED.r,u.ColorPalette.PERSON_RECOVERED.g,u.ColorPalette.PERSON_RECOVERED.b],3*r)}e.rippleTimeVertices_[r]=(a.Engine.elasped-t.rippleStartedTime)%l.Person.RIPPLE_DURATION/l.Person.RIPPLE_DURATION,r++}}))})),n.bindBuffer(n.ARRAY_BUFFER,this.rippleVertexBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array([-c.SIRModel.infectionRadius,-c.SIRModel.infectionRadius,c.SIRModel.infectionRadius,-c.SIRModel.infectionRadius,c.SIRModel.infectionRadius,c.SIRModel.infectionRadius,-c.SIRModel.infectionRadius,-c.SIRModel.infectionRadius,-c.SIRModel.infectionRadius,c.SIRModel.infectionRadius,c.SIRModel.infectionRadius,c.SIRModel.infectionRadius]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,this.rippleTexCoordBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array([0,0,1,0,1,1,0,0,0,1,1,1]),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,this.ripplePositionBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array(this.rippleVertices_.buffer,0,2*r),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,this.rippleColorBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array(this.rippleColorVertices_.buffer,0,3*r),n.STATIC_DRAW),n.bindBuffer(n.ARRAY_BUFFER,this.rippleTimeBuffer),n.bufferData(n.ARRAY_BUFFER,new Float32Array(this.rippleTimeVertices_.buffer,0,r),n.STATIC_DRAW),n.drawArraysInstanced(n.TRIANGLES,0,6,r)},t.prototype.draw=function(t){this.canvas.width=this.box.offsetWidth,this.canvas.height=this.box.offsetHeight,this.ratio_=Math.min(this.canvas.width/this.width,this.canvas.height/this.height);var e=this.width*this.ratio_,n=this.height*this.ratio_;this.gl_.viewport(0,this.canvas.height-n,e,n),this.gl_.clearColor(0,0,0,0),this.gl_.clear(this.gl_.COLOR_BUFFER_BIT|this.gl_.DEPTH_BUFFER_BIT),this.drawSociety(t),this.drawRipple(t),this.drawPeople(t)},t}();e.Renderer=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n,r,i){var o=this;this.gl_=t,this.attributeMap=new Map,this.uniformMap=new Map,this.program_=this.createProgramFromSources(e,n),r&&r.forEach((function(t){var e=o.gl_.getAttribLocation(o.program,t);o.attributeMap.set(t,e),console.log(t,e)})),i&&i.forEach((function(t){var e=o.gl_.getUniformLocation(o.program,t);o.uniformMap.set(t,e),console.log(t,e)}))}return Object.defineProperty(t.prototype,"program",{get:function(){return this.program_},enumerable:!0,configurable:!0}),t.prototype.getAttributeLocation=function(t){return this.attributeMap.get(t)},t.prototype.getUniformLocation=function(t){return this.uniformMap.get(t)},t.prototype.loadShader=function(t,e){var n=this.gl_.createShader(e);if(this.gl_.shaderSource(n,t),this.gl_.compileShader(n),!this.gl_.getShaderParameter(n,this.gl_.COMPILE_STATUS)){var r=this.gl_.getShaderInfoLog(n);return console.error("Failed to compile shader",r),this.gl_.deleteShader(n),null}return n},t.prototype.createProgram=function(t){var e=this,n=this.gl_.createProgram();if(t.forEach((function(t){e.gl_.attachShader(n,t)})),this.gl_.linkProgram(n),!this.gl_.getProgramParameter(n,this.gl_.LINK_STATUS)){var r=this.gl_.getProgramInfoLog(n);return console.error("Failed to link program",r),this.gl_.deleteProgram(n),null}return n},t.prototype.createProgramFromSources=function(t,e){var n=[];return n.push(this.loadShader(t,this.gl_.VERTEX_SHADER)),n.push(this.loadShader(e,this.gl_.FRAGMENT_SHADER)),this.createProgram(n)},t}();e.Shader=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(t,e,n){this.r=t/255,this.g=e/255,this.b=n/255};e.Color=r;var i=function(){this.PERSON_SUSCEPTIBLE=new r(148,193,203),this.PERSON_INFECTED=new r(246,142,159),this.PERSON_INFECTED_UNKNOWN=new r(248,255,52),this.PERSON_RECOVERED=new r(78,75,77)};e.ColorPalette=new i},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(9),s=n(3),a=n(6),u=function(t){function e(){var e=t.call(this)||this;return e.onDidPositionChange=new a.Subject,e.position_=new s.Vector2(0,0),e}return i(e,t),Object.defineProperty(e.prototype,"position",{get:function(){return this.position_},set:function(t){this.position_=new s.Vector2(t.x,t.y),this.onDidPositionChange.next()},enumerable:!0,configurable:!0}),e.prototype.update=function(){},e}(o.Component);e.Transform=u},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.begins_=new Map,e.ends_=new Map,e.updates_=new Map,e}return i(e,t),Object.defineProperty(e.prototype,"state",{get:function(){return this.state_},set:function(t){var e=this.state;if(e!==t){var n=this.ends_.get(e);n&&n(),this.state_=t;var r=this.begins_.get(t);r&&r()}},enumerable:!0,configurable:!0}),e.prototype.setStateCallback=function(t,e,n,r){this.begins_.set(t,e),this.ends_.set(t,n),this.updates_.set(t,r)},e.prototype.update=function(){var t=this.updates_.get(this.state);t&&t()},e}(n(9).Component);e.StateMachine=o},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(21),s=n(5),a=n(3),u=n(1),c=n(4),l=n(0),f=function(){function t(){this.elapsed_=0,this.numSuspectible_=0,this.numInfectious_=0,this.numRecovered_=0,this.records_=[]}return Object.defineProperty(t.prototype,"elapsed",{get:function(){return this.elapsed_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"numSuspectible",{get:function(){return this.numSuspectible_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"numInfectious",{get:function(){return this.numInfectious_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"numRecovered",{get:function(){return this.numRecovered_},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"records",{get:function(){return this.records_},enumerable:!0,configurable:!0}),t.prototype.update=function(t,e,n){this.numSuspectible_=t,this.numInfectious_=e,this.numRecovered_=n},t.prototype.elapse=function(t){this.elapsed_=t},t.prototype.record=function(){this.records_.push([this.numSuspectible_,this.numInfectious_,this.numRecovered_])},t}();e.Statistic=f;var h=function(t){function e(){var e=t.call(this)||this;return e.statistic=new f,e.societies_=[],e.quarantine_=null,e.time_=0,e.day_=0,e}return i(e,t),Object.defineProperty(e.prototype,"societies",{get:function(){return this.societies_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"quarantine",{get:function(){return this.quarantine_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"day",{get:function(){return this.day_},enumerable:!0,configurable:!0}),e.prototype.createQuarantine=function(t,e,n,r){return this.quarantine_=new o.Society(this,n,r),this.quarantine_.transform.position=new a.Vector2(t,e),this.quarantine_.quarantine=!0,this.listenSociety(this.quarantine),this.quarantine_},e.prototype.createSociety=function(t,e,n,r){var i=new o.Society(this,n,r);return i.transform.position=new a.Vector2(t,e),this.societies_.push(i),this.listenSociety(i),i},e.prototype.doUpdate=function(){this.time_+=u.Engine.delta;for(var t=Math.floor(this.time_/l.SIRModel.timeFactor),e=this.day_;e<t;e++)this.statistic.record();this.day_!=t&&(this.day_=t),this.statistic.elapse(this.time_)},e.prototype.listenSociety=function(t){var e=this;t.onDidPopulatePerson.subscribe((function(t){e.statistic.update(e.statistic.numSuspectible+1,e.statistic.numInfectious,e.statistic.numRecovered)})),t.onDidChangePersonSIRState.subscribe((function(t){switch(t.lastState){case c.SIRState.Suspectible:e.statistic.update(e.statistic.numSuspectible-1,e.statistic.numInfectious,e.statistic.numRecovered);break;case c.SIRState.Infectious:case c.SIRState.Infectious_Unknown:e.statistic.update(e.statistic.numSuspectible,e.statistic.numInfectious-1,e.statistic.numRecovered);break;case c.SIRState.Recovered:e.statistic.update(e.statistic.numSuspectible,e.statistic.numInfectious,e.statistic.numRecovered-1)}switch(t.person.state){case c.SIRState.Suspectible:e.statistic.update(e.statistic.numSuspectible+1,e.statistic.numInfectious,e.statistic.numRecovered);break;case c.SIRState.Infectious:case c.SIRState.Infectious_Unknown:e.statistic.update(e.statistic.numSuspectible,e.statistic.numInfectious+1,e.statistic.numRecovered);break;case c.SIRState.Recovered:e.statistic.update(e.statistic.numSuspectible,e.statistic.numInfectious,e.statistic.numRecovered+1)}}))},e}(s.Entity);e.World=h},function(t,e,n){"use strict";var r,i=this&&this.__extends||(r=function(t,e){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])})(t,e)},function(t,e){function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)});Object.defineProperty(e,"__esModule",{value:!0});var o=n(22),s=n(5),a=n(3),u=n(8),c=n(6),l=0,f=function(t){function e(e,n,r){var i=t.call(this)||this;return i.world=e,i.id=l++,i.quarantine=!1,i.zones_=new Map,i.personToZoneMap_=new Map,i.people_=new Set,i.onDidChangePersonSIRState=new c.Subject,i.onDidPopulatePerson=new c.Subject,i.peopleSubscription_=new Map,i.size_=new a.Vector2(n,r),i.zoneWidth_=30,i.zoneHeight_=30,i.instantiateZones(),i}return i(e,t),Object.defineProperty(e.prototype,"size",{get:function(){return this.size_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"width",{get:function(){return this.size_.x},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"height",{get:function(){return this.size_.y},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"people",{get:function(){return this.people_},enumerable:!0,configurable:!0}),e.prototype.doUpdate=function(){},e.prototype.populate=function(){var t=new u.Person(this.world,this),e=this.positionRelativeToWorld(new a.Vector2(a.randInt(0,this.width),a.randInt(0,this.height)));return t.transform.position=e,this.onDidPopulatePerson.next(new u.PersonEvent(t)),t},e.prototype.addPerson=function(t){var e=this;this.people_.add(t),this.updateZone(t);var n=[];n.push(t.transform.onDidPositionChange.subscribe((function(n){e.updateZone(t)}))),n.push(t.onDidChangeSIRState.subscribe((function(t){e.onDidChangePersonSIRState.next(t)}))),this.peopleSubscription_.set(t,n)},e.prototype.removePerson=function(t){this.people_.delete(t);var e=this.personToZoneMap_.get(t);e&&e.removePerson(t),this.personToZoneMap_.delete(t),this.peopleSubscription_.get(t).forEach((function(t){return t.unsubscribe()})),this.peopleSubscription_.delete(t)},e.prototype.updateZone=function(t){var e=this.personToZoneMap_.get(t),n=this.getZone(this.mapPositionWorldToSociety(t.transform.position));e!=n&&(e&&e.removePerson(t),n&&n.addPerson(t),this.personToZoneMap_.set(t,n))},e.prototype.getZone=function(t){var e=Math.floor(t.x/this.zoneWidth_),n=Math.floor(t.y/this.zoneHeight_)*this.zoneColumn_+e;return this.zones_.get(n)},e.prototype.instantiateZones=function(){for(var t=Math.ceil(this.width/this.zoneWidth_),e=Math.ceil(this.height/this.zoneHeight_),n=0;n<e;n++)for(var r=0;r<t;r++){var i=n*t+r,s=new o.Zone(this.world,this,r,n,this.zoneWidth_,this.zoneHeight_);this.zones_.set(i,s)}this.zoneColumn_=t,this.zoneRow_=e},e.prototype.getZoneByCoordinate=function(t){var e=Math.floor(t.x/this.zoneWidth_),n=Math.floor(t.y/this.zoneHeight_)*this.zoneWidth_+e;return this.zones_.get(n)},e.prototype.iterateNearby=function(t,e){var n=this.getZone(t);if(n)for(var r=-1;r<=1;r++)for(var i=-1;i<=1;i++){var o=n.x+i,s=(n.y+r)*this.zoneColumn_+o,a=this.zones_.get(s);a&&a.people.forEach((function(t){e(t)}))}},e.prototype.mapPositionWorldToSociety=function(t){return t.sub(this.transform.position)},e.prototype.positionRelativeToWorld=function(t){return t.add(this.transform.position)},e.prototype.update=function(){},e}(s.Entity);e.Society=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e,n,r,i,o){this.world=t,this.society=e,this.x=n,this.y=r,this.width=i,this.height=o,this.people_=new Set}return Object.defineProperty(t.prototype,"people",{get:function(){return this.people_},enumerable:!0,configurable:!0}),t.prototype.addPerson=function(t){this.people_.add(t)},t.prototype.removePerson=function(t){this.people_.delete(t)},t}();e.Zone=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(){function t(t,e,n){this.box=t,this.canvas=e,this.statistic=n,this.dayr_=1,this.ctx_=e.getContext("2d")}return t.prototype.renderDay=function(){for(var t=this.canvas,e=this.ctx_,n=t.width+10,i=t.height;;){if(!(n*this.dayr_/this.statistic.elapsed*r.SIRModel.timeFactor*r.SIRModel.dayFactor<50))break;1==this.dayr_?this.dayr_=5:this.dayr_*=2}var o=n*this.dayr_/this.statistic.elapsed*r.SIRModel.timeFactor*r.SIRModel.dayFactor,s=Math.max(0,Math.min(1,(o-50)/50)),a=Math.ceil(n/o);e.fillStyle="white",e.strokeStyle="white",e.textAlign="center",e.lineWidth=3,e.font="16px Arial";for(var u=1;u<a;u++){e.save();var c=u*this.dayr_;1==this.dayr_?e.globalAlpha=c%5?s:1:e.globalAlpha=u%2?s:1;var l=o*u;e.translate(l,i-30),e.fillText(c+"",0,25),e.beginPath(),e.moveTo(0,-8),e.lineTo(0,8),e.stroke(),e.restore()}},t.prototype.render2=function(t){var e=this.canvas,n=this.ctx_,r=e.width+10,i=e.height-30,o=(this.statistic.records.length-1)/200;n.beginPath(),n.moveTo(0,i);for(var s=0,a=0;a<200;a++){var u=a*o;s=Math.max(s,u);var c=this.statistic.records[Math.floor(u)],l=this.statistic.records[Math.ceil(u)];if(!c||!l)break;var f=r/200*a,h=i-i/((c[0]+c[1]+c[2]+l[0]+l[1]+l[2])/2)*t(c,l);h,n.lineTo(f,h)}n.lineTo(r,i),n.closePath(),n.fill()},t.prototype.render=function(){var t=this.canvas,e=this.ctx_;t.width=this.box.offsetWidth,t.height=this.box.offsetHeight,e.fillStyle="#444345",e.clearRect(0,0,t.width,t.height),e.fillRect(0,0,t.width,t.height-30),e.fillStyle="#31606e",this.render2((function(t,e){return(t[0]+e[0])/2+(t[1]+e[1])/2})),e.fillStyle="#f56754",this.render2((function(t,e){return(t[1]+e[1])/2})),this.renderDay()},t}();e.StatisticView=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,